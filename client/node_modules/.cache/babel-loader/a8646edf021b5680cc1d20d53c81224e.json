{"ast":null,"code":"import _objectSpread from \"/Volumes/Storage/goinfre/isifeddi/Matcha-i2/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport ResetPassword from '../../components/resetPassword';\nimport { ResetPasswordAction } from '../../actions/resetPasswordAction';\nimport { connect } from \"react-redux\";\nimport { reduxForm } from 'redux-form';\n\nconst validate = values => {\n  const errors = {};\n  const requiredFields = ['password', 'confirmPassword'];\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  return errors;\n};\n\nconst mapStateToProps = state => ({\n  \"form\": state.form,\n  \"status\": state.resetPassword.status,\n  \"resetPasswordStatus\": state.resetPassword.status,\n  \"resetError\": state.resetPassword.error\n});\n\nconst mapDispatchToProps = {\n  \"resetPasswordAction\": ResetPasswordAction\n};\n\nconst mergeProps = (stateProps, dispatchProps, otherProps) => _objectSpread({}, stateProps, {}, dispatchProps, {}, otherProps, {\n  \"handleSubmit\": otherProps.handleSubmit(form => {\n    const token = otherProps.match.params.token;\n    const data = {\n      form,\n      token\n    };\n    dispatchProps.resetPasswordAction(data);\n  })\n});\n\nconst connectedResetPasswordContainer = connect(mapStateToProps, mapDispatchToProps, mergeProps)(ResetPassword);\nconst ResetPasswordContainer = reduxForm({\n  form: \"resetPassword\",\n  \"destroyOnUnmount\": true,\n  validate\n})(connectedResetPasswordContainer);\nexport default ResetPasswordContainer;","map":{"version":3,"sources":["/Volumes/Storage/goinfre/isifeddi/Matcha-i2/client/src/containers/resetPassword/index.js"],"names":["ResetPassword","ResetPasswordAction","connect","reduxForm","validate","values","errors","requiredFields","forEach","field","trim","password","test","confirmPassword","mapStateToProps","state","form","resetPassword","status","error","mapDispatchToProps","mergeProps","stateProps","dispatchProps","otherProps","handleSubmit","token","match","params","data","resetPasswordAction","connectedResetPasswordContainer","ResetPasswordContainer"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,gCAA1B;AACA,SAAQC,mBAAR,QAAkC,mCAAlC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,SAAR,QAAwB,YAAxB;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AACzB,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,cAAc,GAAG,CACnB,UADmB,EAEnB,iBAFmB,CAAvB;AAKAA,EAAAA,cAAc,CAACC,OAAf,CAAuBC,KAAK,IAAI;AAC5B,QAAI,CAACJ,MAAM,CAACI,KAAD,CAAP,IAAkB,CAACJ,MAAM,CAACI,KAAD,CAAN,CAAcC,IAAd,EAAvB,EAA6C;AACzCJ,MAAAA,MAAM,CAACG,KAAD,CAAN,GAAgB,YAAhB;AACH;AACJ,GAJD;AAMA,MAAGJ,MAAM,CAACM,QAAP,IAAmB,CAAC,KAAKC,IAAL,CAAUP,MAAM,CAACM,QAAjB,CAAvB,EACIL,MAAM,CAACK,QAAP,GAAkB,kCAAlB,CADJ,KAEK,IAAGN,MAAM,CAACM,QAAP,IAAmB,CAAC,QAAQC,IAAR,CAAaP,MAAM,CAACM,QAApB,CAAvB,EACDL,MAAM,CAACK,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGN,MAAM,CAACM,QAAP,IAAmB,CAAC,QAAQC,IAAR,CAAaP,MAAM,CAACM,QAApB,CAAvB,EACDL,MAAM,CAACK,QAAP,GAAkB,4CAAlB,CADC,KAEA,IAAGN,MAAM,CAACM,QAAP,IAAmB,CAAC,uCAAuCC,IAAvC,CAA4CP,MAAM,CAACM,QAAnD,CAAvB,EACDL,MAAM,CAACK,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGN,MAAM,CAACM,QAAP,IAAmB,CAAC,uDAAuDC,IAAvD,CAA4DP,MAAM,CAACM,QAAnE,CAAvB,EACDL,MAAM,CAACK,QAAP,GAAkB,yCAAlB;AACJ,MAAGN,MAAM,CAACQ,eAAP,IAA0BR,MAAM,CAACM,QAAP,KAAoBN,MAAM,CAACQ,eAAxD,EACIP,MAAM,CAACO,eAAP,GAAyB,4BAAzB;AACJ,SAAOP,MAAP;AACH,CA1BD;;AA4BA,MAAMQ,eAAe,GAAIC,KAAD,KACxB;AACI,UAASA,KAAK,CAACC,IADnB;AAEI,YAAWD,KAAK,CAACE,aAAN,CAAoBC,MAFnC;AAGI,yBAAuBH,KAAK,CAACE,aAAN,CAAoBC,MAH/C;AAII,gBAAcH,KAAK,CAACE,aAAN,CAAoBE;AAJtC,CADwB,CAAxB;;AAOA,MAAMC,kBAAkB,GAAG;AACvB,yBAAuBnB;AADA,CAA3B;;AAGA,MAAMoB,UAAU,GAAG,CAACC,UAAD,EAAaC,aAAb,EAA4BC,UAA5B,uBACZF,UADY,MAEZC,aAFY,MAGZC,UAHY;AAIf,kBAAiBA,UAAU,CAACC,YAAX,CAAyBT,IAAD,IAAU;AAC/C,UAAMU,KAAK,GAAGF,UAAU,CAACG,KAAX,CAAiBC,MAAjB,CAAwBF,KAAtC;AACA,UAAMG,IAAI,GAAG;AAACb,MAAAA,IAAD;AAAOU,MAAAA;AAAP,KAAb;AACAH,IAAAA,aAAa,CAACO,mBAAd,CAAkCD,IAAlC;AACH,GAJgB;AAJF,EAAnB;;AAWA,MAAME,+BAA+B,GAAG7B,OAAO,CAACY,eAAD,EAAkBM,kBAAlB,EAAqCC,UAArC,CAAP,CAAwDrB,aAAxD,CAAxC;AACA,MAAMgC,sBAAsB,GAAG7B,SAAS,CAAC;AACrCa,EAAAA,IAAI,EAAG,eAD8B;AAErC,sBAAoB,IAFiB;AAGrCZ,EAAAA;AAHqC,CAAD,CAAT,CAI5B2B,+BAJ4B,CAA/B;AAMA,eAAeC,sBAAf","sourcesContent":["import ResetPassword from '../../components/resetPassword';\nimport {ResetPasswordAction} from '../../actions/resetPasswordAction';\nimport {connect} from \"react-redux\";\nimport {reduxForm} from 'redux-form';\n\nconst validate = (values) => {\n    const errors = {};\n    const requiredFields = [\n        'password',\n        'confirmPassword',\n    ];\n\n    requiredFields.forEach(field => {\n        if (!values[field] || !values[field].trim()) {\n            errors[field] = 'Required !';\n        }\n    });\n\n    if(values.password && !/\\d/.test(values.password))\n        errors.password = \"Password must contain a number !\"\n    else if(values.password && !/[A-Z]/.test(values.password))\n        errors.password = \"Password must contain an uppercase letter !\"\n    else if(values.password && !/[a-z]/.test(values.password))\n        errors.password = \"Password must contain a lowercase letter !\"\n    else if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n        errors.password = \"Password must contain a special character !\"\n    else if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n        errors.password = \"Password must contain 8-20 characters !\"\n    if(values.confirmPassword && values.password !== values.confirmPassword)\n        errors.confirmPassword = \"Passwords does not match !\"\n    return errors;\n}\n\nconst mapStateToProps = (state) => (\n{\n    \"form\" : state.form,\n    \"status\" : state.resetPassword.status,\n    \"resetPasswordStatus\": state.resetPassword.status,\n    \"resetError\": state.resetPassword.error\n});\nconst mapDispatchToProps = {\n    \"resetPasswordAction\": ResetPasswordAction\n};\nconst mergeProps = (stateProps, dispatchProps, otherProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    ...otherProps,\n    \"handleSubmit\" : otherProps.handleSubmit((form) => {\n        const token = otherProps.match.params.token;\n        const data = {form, token}\n        dispatchProps.resetPasswordAction(data);\n    })\n});\n\nconst connectedResetPasswordContainer = connect(mapStateToProps, mapDispatchToProps,mergeProps)(ResetPassword);\nconst ResetPasswordContainer = reduxForm({\n    form : \"resetPassword\",\n    \"destroyOnUnmount\": true,\n    validate,\n})(connectedResetPasswordContainer);\n\nexport default ResetPasswordContainer;"]},"metadata":{},"sourceType":"module"}