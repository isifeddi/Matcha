{"ast":null,"code":"import _defineProperty from \"/Users/isifeddi/Desktop/Matcha/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeLatest, put } from \"redux-saga/effects\";\nimport { getOptionsSuccess, createOptionSuccess, createOptionError, addInfoSuccess, addInfoError } from \"../actions/addInfoAction\"; //import { decodeTokenAction } from \"../actions/decodeAction\";\n\nimport axios from 'axios';\n\nconst getSelectOptions = function* getSelectOptions() {\n  try {\n    const response = yield axios.post('http://localhost:5000/getOptions');\n\n    if (response.data) {\n      yield put(getOptionsSuccess(response.data));\n    } else {\n      yield put(getOptionsSuccess());\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(getOptionsSuccess());\n    }\n  }\n};\n\nconst createSelectOption = function* createSelectOption(act) {\n  try {\n    const id = yield select(state => state.user.id);\n    const option = act.data.value;\n    const response = yield axios.post('http://localhost:5000/createOption', {\n      option: option,\n      id: id\n    });\n\n    if (response.data.created) {\n      yield put(createOptionSuccess(response.data.option));\n    } else {\n      yield put(createOptionError(response.data.error));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(createOptionError('there has been an error'));\n    }\n  }\n};\n\nconst add_Info = function* add_Info({\n  data,\n  id\n}) {\n  try {\n    const info = _objectSpread({}, data, {\n      id\n    });\n\n    const inter = data.interests.map(item => item.value);\n    info.interests = inter;\n    const response = yield axios.post('http://localhost:5000/addInfo', info);\n\n    if (response.data.added) {\n      yield put(addInfoSuccess()); // yield put(decodeTokenAction);\n    } else {\n      yield put(addInfoError(response.data.error));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(createOptionError('there has been an error'));\n    }\n  }\n};\n\nexport default function* () {\n  yield takeLatest(\"GET_OPTIONS\", getSelectOptions);\n  yield takeLatest(\"CREATE_OPTION\", createSelectOption);\n  yield takeLatest(\"ADD_INFO\", add_Info);\n}","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/sagas/addInfoSaga.js"],"names":["takeLatest","put","getOptionsSuccess","createOptionSuccess","createOptionError","addInfoSuccess","addInfoError","axios","getSelectOptions","response","post","data","error","createSelectOption","act","id","select","state","user","option","value","created","add_Info","info","inter","interests","map","item","added"],"mappings":"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","sourcesContent":["import { takeLatest, put } from \"redux-saga/effects\";\nimport { getOptionsSuccess, createOptionSuccess, createOptionError, addInfoSuccess, addInfoError} from \"../actions/addInfoAction\";\n//import { decodeTokenAction } from \"../actions/decodeAction\";\nimport axios from 'axios';\n\nconst getSelectOptions =\n  function *getSelectOptions () {\n    try {\n        const response  = yield axios.post('http://localhost:5000/getOptions');\n        if(response.data)\n        {\n            yield put(getOptionsSuccess(response.data));\n        }\n        else\n        {\n            yield put(getOptionsSuccess());\n        }\n    }catch (error) {\n      if (error.response) {\n        yield put(getOptionsSuccess());\n      }\n    }\n};\n\nconst createSelectOption =\n  function *createSelectOption (act) {\n    try {\n        const id = yield select((state) => state.user.id);\n        const option = act.data.value;\n        const response  = yield axios.post('http://localhost:5000/createOption', {option: option, id: id});\n        if(response.data.created)\n        {\n          yield put(createOptionSuccess(response.data.option));\n        }\n        else\n        {\n          yield put(createOptionError(response.data.error));\n        }\n    }catch (error) {\n      if (error.response) {\n        yield put(createOptionError('there has been an error'));\n      }\n    }\n};\n\nconst add_Info =\n  function *add_Info ({data, id}) {\n    try {\n      const info = {...data, id}\n      const inter = data.interests.map(item => item.value)\n      info.interests = inter;\n      const response  = yield axios.post('http://localhost:5000/addInfo', info);\n      if(response.data.added)\n      {\n        yield put(addInfoSuccess());\n        // yield put(decodeTokenAction);\n      }\n      else\n      {\n        yield put(addInfoError(response.data.error));\n      }\n    }catch (error) {\n      if (error.response) {\n        yield put(createOptionError('there has been an error'));\n      }\n    }\n};\n\nexport default function *() {\n  yield takeLatest(\"GET_OPTIONS\", getSelectOptions);\n  yield takeLatest(\"CREATE_OPTION\", createSelectOption);\n  yield takeLatest(\"ADD_INFO\", add_Info)\n}"]},"metadata":{},"sourceType":"module"}