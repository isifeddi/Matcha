{"ast":null,"code":"import axios from 'axios';\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = values => {\n  const errors = {};\n  const requiredFields = ['firstname', 'lastname', 'username', 'email', 'password', 'confirmPassword'];\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  sleep(1000).then(async () => {\n    const v = {\n      username: values.username,\n      email: values.email\n    };\n    const er = await axios.post('http://localhost:5000/checkIfEx', v);\n    console.log(er);\n\n    if (er.data.username === 'Username already exists') {\n      errors.username = er.data.username;\n    }\n\n    if (er.data.email === 'Email already exists') {\n      errors.email = er.data.email;\n    }\n  });\n  if (values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username)) errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) errors.email = \"Invalid email address !\";\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  return errors;\n};\n\nexport default validate;","map":{"version":3,"sources":["/Users/ibouroum/Desktop/Maatcha/client/src/containers/Register/validate.js"],"names":["axios","sleep","ms","Promise","resolve","setTimeout","validate","values","errors","requiredFields","forEach","field","trim","then","v","username","email","er","post","console","log","data","test","password","confirmPassword"],"mappings":"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","sourcesContent":["import axios from 'axios'\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\nconst validate = (values) => {\n\n    const errors = {};\n    const requiredFields = [\n        'firstname',\n        'lastname',\n        'username',\n        'email',\n        'password',\n        'confirmPassword',\n    ];\n\n    requiredFields.forEach(field => {\n        if (!values[field] || !values[field].trim()) {\n            errors[field] = 'Required !';\n        }\n    });\n    sleep(1000)\n    .then(async () => {\n\n\n\n      const v = {username :values.username, email: values.email}\n\n      const er = await axios.post('http://localhost:5000/checkIfEx', v)\n console.log(er);\n      if (er.data.username === 'Username already exists')\n      {\n        errors.username = er.data.username\n      }\n      if (er.data.email === 'Email already exists')\n      {\n        errors.email= er.data.email\n      }\n    })\n   \n\n    if(values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username))\n        errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n    if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email))\n        errors.email = \"Invalid email address !\";\n    if(values.password && !/\\d/.test(values.password))\n        errors.password = \"Password must contain a number !\"\n    else if(values.password && !/[A-Z]/.test(values.password))\n        errors.password = \"Password must contain an uppercase letter !\"\n    else if(values.password && !/[a-z]/.test(values.password))\n        errors.password = \"Password must contain a lowercase letter !\"\n    else if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n        errors.password = \"Password must contain a special character !\"\n    else if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n        errors.password = \"Password must contain 8-20 characters !\"\n    if(values.confirmPassword && values.password !== values.confirmPassword)\n        errors.confirmPassword = \"Passwords does not match !\"\n    return errors;\n}\n\nexport default validate;"]},"metadata":{},"sourceType":"module"}