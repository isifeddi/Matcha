{"ast":null,"code":"import Axios from \"axios\";\n\nconst validate = values => {\n  const errors = {};\n  const requiredFields = ['firstname', 'lastname', 'username', 'email', 'password', 'confirmPassword'];\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  Axios.get('http://localhost:5000/register').then(response => {\n    errors.username = response.error.username;\n    errors.email = response.error.email;\n  });\n  if (values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username)) errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address !\";\n  }\n\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  return errors;\n};\n\nexport default validate;","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/containers/Register/validate.js"],"names":["Axios","validate","values","errors","requiredFields","forEach","field","trim","get","then","response","username","error","email","test","password","confirmPassword"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AACzB,QAAMC,MAAM,GAAG,EAAf;AAEA,QAAMC,cAAc,GAAG,CACnB,WADmB,EAEnB,UAFmB,EAGnB,UAHmB,EAInB,OAJmB,EAKnB,UALmB,EAMnB,iBANmB,CAAvB;AAQAA,EAAAA,cAAc,CAACC,OAAf,CAAuBC,KAAK,IAAI;AAC5B,QAAI,CAACJ,MAAM,CAACI,KAAD,CAAP,IAAkB,CAACJ,MAAM,CAACI,KAAD,CAAN,CAAcC,IAAd,EAAvB,EAA6C;AACzCJ,MAAAA,MAAM,CAACG,KAAD,CAAN,GAAgB,YAAhB;AACH;AACJ,GAJD;AAMAN,EAAAA,KAAK,CAACQ,GAAN,CAAU,gCAAV,EACKC,IADL,CACWC,QAAD,IAAc;AAChBP,IAAAA,MAAM,CAACQ,QAAP,GAAkBD,QAAQ,CAACE,KAAT,CAAeD,QAAjC;AACAR,IAAAA,MAAM,CAACU,KAAP,GAAeH,QAAQ,CAACE,KAAT,CAAeC,KAA9B;AACH,GAJL;AAMI,MAAGX,MAAM,CAACS,QAAP,IAAmB,CAAC,qBAAqBG,IAArB,CAA0BZ,MAAM,CAACS,QAAjC,CAAvB,EACIR,MAAM,CAACQ,QAAP,GAAkB,2EAAlB;;AACJ,MAAIT,MAAM,CAACW,KAAP,IAAgB,CAAC,4CAA4CC,IAA5C,CAAiDZ,MAAM,CAACW,KAAxD,CAArB,EAAqF;AACjFV,IAAAA,MAAM,CAACU,KAAP,GAAe,yBAAf;AACH;;AACD,MAAGX,MAAM,CAACa,QAAP,IAAmB,CAAC,KAAKD,IAAL,CAAUZ,MAAM,CAACa,QAAjB,CAAvB,EACEZ,MAAM,CAACY,QAAP,GAAkB,kCAAlB,CADF,KAEK,IAAGb,MAAM,CAACa,QAAP,IAAmB,CAAC,QAAQD,IAAR,CAAaZ,MAAM,CAACa,QAApB,CAAvB,EACDZ,MAAM,CAACY,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGb,MAAM,CAACa,QAAP,IAAmB,CAAC,QAAQD,IAAR,CAAaZ,MAAM,CAACa,QAApB,CAAvB,EACDZ,MAAM,CAACY,QAAP,GAAkB,4CAAlB,CADC,KAEA,IAAGb,MAAM,CAACa,QAAP,IAAmB,CAAC,uCAAuCD,IAAvC,CAA4CZ,MAAM,CAACa,QAAnD,CAAvB,EACDZ,MAAM,CAACY,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGb,MAAM,CAACa,QAAP,IAAmB,CAAC,uDAAuDD,IAAvD,CAA4DZ,MAAM,CAACa,QAAnE,CAAvB,EACDZ,MAAM,CAACY,QAAP,GAAkB,yCAAlB;AACJ,MAAGb,MAAM,CAACc,eAAP,IAA0Bd,MAAM,CAACa,QAAP,KAAoBb,MAAM,CAACc,eAAxD,EACIb,MAAM,CAACa,eAAP,GAAyB,4BAAzB;AAEJ,SAAOb,MAAP;AACP,CA1CD;;AA4CA,eAAeF,QAAf","sourcesContent":["import Axios from \"axios\";\n\nconst validate = (values) => {\n    const errors = {};\n\n    const requiredFields = [\n        'firstname',\n        'lastname',\n        'username',\n        'email',\n        'password',\n        'confirmPassword',\n    ];\n    requiredFields.forEach(field => {\n        if (!values[field] || !values[field].trim()) {\n            errors[field] = 'Required !';\n        }\n    });\n\n    Axios.get('http://localhost:5000/register')\n        .then((response) => {\n            errors.username = response.error.username;\n            errors.email = response.error.email;\n        })\n\n        if(values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username))\n            errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n        if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n            errors.email = \"Invalid email address !\";\n        }\n        if(values.password && !/\\d/.test(values.password))\n          errors.password = \"Password must contain a number !\"\n        else if(values.password && !/[A-Z]/.test(values.password))\n            errors.password = \"Password must contain an uppercase letter !\"\n        else if(values.password && !/[a-z]/.test(values.password))\n            errors.password = \"Password must contain a lowercase letter !\"\n        else if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n            errors.password = \"Password must contain a special character !\"\n        else if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n            errors.password = \"Password must contain 8-20 characters !\"\n        if(values.confirmPassword && values.password !== values.confirmPassword)\n            errors.confirmPassword = \"Passwords does not match !\"\n        \n        return errors;\n}\n\nexport default validate;"]},"metadata":{},"sourceType":"module"}