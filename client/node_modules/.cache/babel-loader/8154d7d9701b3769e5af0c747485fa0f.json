{"ast":null,"code":"import { takeLatest, put, call, delay } from \"redux-saga/effects\";\nimport { push } from \"react-router-redux\";\nimport { resetState } from '../actions/resetStateAction';\nimport { loginError, loginUserSuccess, loginErrorField } from \"../actions/loginAction\";\nimport { request } from './helper';\n\nconst login = function* login({\n  data\n}) {\n  try {\n    const username = data.username;\n    const password = data.password;\n    const response = yield call(request, {\n      \"url\": \"http://localhost:5000/login\",\n      \"data\": {\n        username,\n        password\n      },\n      \"method\": \"post\"\n    });\n\n    if (response.data.isValid) {\n      console.log(response);\n      const user = response.data.user;\n      yield put(loginUserSuccess());\n      yield put(updateUserSuccess(response.data));\n      if (user.complete === 4) yield put(push(\"/\"));else yield put(push(\"/completeProfile\"));\n    } else {\n      yield put(loginErrorField(response.data.errorField));\n      yield delay(4000);\n      yield put(resetState());\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(loginError(\"error.response.statusText\", \"error.response.status\"));\n    }\n  }\n};\n\nexport default function* () {\n  yield takeLatest(\"LOGIN_USER\", login);\n}","map":{"version":3,"sources":["/Volumes/Storage/goinfre/isifeddi/dd/client/src/sagas/loginSaga.js"],"names":["takeLatest","put","call","delay","push","resetState","loginError","loginUserSuccess","loginErrorField","request","login","data","username","password","response","isValid","console","log","user","updateUserSuccess","complete","errorField","error"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAwBC,IAAxB,EAA6BC,KAA7B,QAAyC,oBAAzC;AACA,SAAQC,IAAR,QAAmB,oBAAnB;AACA,SAAQC,UAAR,QAAyB,6BAAzB;AACA,SAAQC,UAAR,EAAoBC,gBAApB,EAAqCC,eAArC,QAA2D,wBAA3D;AAEA,SAAQC,OAAR,QAAsB,UAAtB;;AAEA,MAAMC,KAAK,GACT,UAAUA,KAAV,CAAiB;AAACC,EAAAA;AAAD,CAAjB,EAAyB;AACvB,MAAI;AACJ,UAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAtB;AACA,UAAMC,QAAQ,GAAGF,IAAI,CAACE,QAAtB;AACE,UAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACO,OAAD,EAAU;AACnC,aAAO,6BAD4B;AAEnC,cAAQ;AACNG,QAAAA,QADM;AAEPC,QAAAA;AAFO,OAF2B;AAMnC,gBAAU;AANyB,KAAV,CAA3B;;AASA,QAAGC,QAAQ,CAACH,IAAT,CAAcI,OAAjB,EACA;AAAEC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,YAAOI,IAAI,GAAGJ,QAAQ,CAACH,IAAT,CAAcO,IAA5B;AACA,YAAMjB,GAAG,CAACM,gBAAgB,EAAjB,CAAT;AACA,YAAMN,GAAG,CAACkB,iBAAiB,CAACL,QAAQ,CAACH,IAAV,CAAlB,CAAT;AACA,UAAGO,IAAI,CAACE,QAAL,KAAkB,CAArB,EACE,MAAMnB,GAAG,CAACG,IAAI,CAAC,GAAD,CAAL,CAAT,CADF,KAGE,MAAMH,GAAG,CAACG,IAAI,CAAC,kBAAD,CAAL,CAAT;AACH,KATD,MAWA;AACE,YAAMH,GAAG,CAACO,eAAe,CAACM,QAAQ,CAACH,IAAT,CAAcU,UAAf,CAAhB,CAAT;AACA,YAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,YAAMF,GAAG,CAACI,UAAU,EAAX,CAAT;AACD;AACF,GA5BD,CA4BC,OAAOiB,KAAP,EAAc;AACb,QAAIA,KAAK,CAACR,QAAV,EAAoB;AAClB,YAAMb,GAAG,CAACK,UAAU,CAAC,2BAAD,EAA8B,uBAA9B,CAAX,CAAT;AACD;AACF;AACF,CAnCH;;AAqCA,eAAe,aAAa;AAC1B,QAAMN,UAAU,CAAC,YAAD,EAAeU,KAAf,CAAhB;AACD","sourcesContent":["import {takeLatest, put,call,delay} from \"redux-saga/effects\";\nimport {push} from \"react-router-redux\";\nimport {resetState} from '../actions/resetStateAction';\nimport {loginError, loginUserSuccess,loginErrorField} from \"../actions/loginAction\";\n\nimport {request} from './helper';\n\nconst login =\n  function *login ({data}) {\n    try {\n    const username = data.username;\n    const password = data.password;\n      const response = yield call(request, {\n        \"url\": \"http://localhost:5000/login\",\n        \"data\": {\n          username,\n         password\n        },\n        \"method\": \"post\"\n      });\n     \n      if(response.data.isValid)\n      { console.log(response)\n        const  user = response.data.user;\n        yield put(loginUserSuccess());\n        yield put(updateUserSuccess(response.data))\n        if(user.complete === 4)\n          yield put(push(\"/\"));\n        else\n          yield put(push(\"/completeProfile\"));\n      }\n      else \n      {\n        yield put(loginErrorField(response.data.errorField))\n        yield delay(4000);\n        yield put(resetState());\n      }\n    }catch (error) {\n      if (error.response) {\n        yield put(loginError(\"error.response.statusText\", \"error.response.status\"));\n      }\n    }\n  };\n\nexport default function *() {\n  yield takeLatest(\"LOGIN_USER\", login);\n}"]},"metadata":{},"sourceType":"module"}