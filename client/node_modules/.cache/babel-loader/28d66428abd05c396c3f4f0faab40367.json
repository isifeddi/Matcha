{"ast":null,"code":"import _defineProperty from \"/Users/isifeddi/Desktop/Matcha/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Register from '../../components/Register';\nimport { InscriptionAction } from '../../actions/registerAction';\nimport { connect } from \"react-redux\";\nimport { reduxForm } from 'redux-form';\nimport axios from 'axios';\n\nconst usernameValidate = (values, dispatch, props) => axios.post(\"http://localhost:5000/availableUsername\", {\n  username: values.username\n}).then(res => {\n  let error = {};\n\n  if (res.data === false) {\n    if (props.asyncErrors) {\n      error = {\n        \"username\": \"That username is taken\",\n        \"email\": \"That email is taken\"\n      };\n    } else {\n      error = {\n        \"username\": \"That username is taken\"\n      };\n    }\n  } else if (props.asyncErrors) {\n    error = {\n      \"email\": \"That email is taken\"\n    };\n  }\n\n  throw error;\n});\n\nconst emailValidate = (values, dispatch, props) => axios.post(\"http://localhost:5000/availableEmail\", {\n  email: values.email\n}).then(res => {\n  let error = {};\n\n  if (res.data === false) {\n    if (props.asyncErrors) {\n      error = {\n        \"username\": \"That username is taken\",\n        \"email\": \"That email is taken\"\n      };\n    } else {\n      error = {\n        \"email\": \"That email is taken\"\n      };\n    }\n  } else if (props.asyncErrors) {\n    error = {\n      \"username\": \"That username is taken\"\n    };\n  }\n\n  throw error;\n});\n\nfunction composeAsyncValidators(validatorFns) {\n  return async (values, dispatch, props, field) => {\n    if (!field) {\n      return await function () {\n        return true;\n      };\n    }\n\n    const validatorFn = validatorFns[field];\n    await validatorFn(values, dispatch, props, field);\n  };\n}\n\nconst asyncValidateAll = composeAsyncValidators({\n  \"username\": usernameValidate,\n  \"email\": emailValidate\n});\n\nconst validate = values => {\n  const errors = {};\n  const requiredFields = ['firstname', 'lastname', 'username', 'email', 'password', 'confirmPassword'];\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  if (values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username)) errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) errors.email = \"Invalid email address !\";\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  return errors;\n};\n\nconst mapStateToProps = state => ({\n  \"form\": state.form,\n  \"status\": state.register\n});\n\nconst mapDispatchToProps = {\n  \"registerAction\": InscriptionAction\n};\n\nconst mergeProps = (stateProps, dispatchProps, otherProps) => _objectSpread({}, stateProps, {}, dispatchProps, {}, otherProps, {\n  \"handleSubmit\": otherProps.handleSubmit(form => {\n    dispatchProps.registerAction(form);\n  })\n});\n\nconst connectedRegisterContainer = connect(mapStateToProps, mapDispatchToProps, mergeProps)(Register);\nconst RegisterContainer = reduxForm({\n  form: \"register\",\n  \"destroyOnUnmount\": true,\n  validate,\n  \"asyncValidate\": asyncValidateAll,\n  \"asyncBlurFields\": [\"username\", \"email\"]\n})(connectedRegisterContainer);\nexport default RegisterContainer;","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/containers/Register/index.js"],"names":["Register","InscriptionAction","connect","reduxForm","axios","usernameValidate","values","dispatch","props","post","username","then","res","error","data","asyncErrors","emailValidate","email","composeAsyncValidators","validatorFns","field","validatorFn","asyncValidateAll","validate","errors","requiredFields","forEach","trim","test","password","confirmPassword","mapStateToProps","state","form","register","mapDispatchToProps","mergeProps","stateProps","dispatchProps","otherProps","handleSubmit","registerAction","connectedRegisterContainer","RegisterContainer"],"mappings":"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","sourcesContent":["import Register from '../../components/Register';\nimport {InscriptionAction} from '../../actions/registerAction';\nimport {connect} from \"react-redux\";\nimport {reduxForm } from 'redux-form';\nimport axios from 'axios';\n\nconst usernameValidate = (values, dispatch, props) => axios.post(\"http://localhost:5000/availableUsername\",{username : values.username})\n.then((res) => {\n        let error = {};\n        if (res.data === false) {\n            if (props.asyncErrors) {\n                error = {\"username\": \"That username is taken\", \"email\": \"That email is taken\"};\n            }\n            else {\n                error = {\"username\": \"That username is taken\"};\n            }\n        }\n        else if (props.asyncErrors) {\n            error = {\"email\": \"That email is taken\"};\n        }\n        throw error;\n});\n\nconst emailValidate = (values, dispatch, props) => axios.post(\"http://localhost:5000/availableEmail\",{email : values.email})\n.then((res) => {\n        let error = {};\n        if (res.data === false) {\n            if (props.asyncErrors) {\n                error =  {\"username\": \"That username is taken\", \"email\": \"That email is taken\"};\n            }\n            else{\n                error =  {\"email\": \"That email is taken\"};\n            }\n        }\n        else if (props.asyncErrors){\n            error =  {\"username\": \"That username is taken\"};\n        }\n        throw error;\n});\n\nfunction composeAsyncValidators (validatorFns) {\n  return async (values, dispatch, props, field) => {\n    if (!field) {\n      return await function () {\n        return true;\n      };\n    }\n    const validatorFn = validatorFns[field];\n    await validatorFn(values, dispatch, props, field);\n  };\n}\n\nconst asyncValidateAll = composeAsyncValidators({\n  \"username\": usernameValidate,\n  \"email\": emailValidate\n});\n\nconst validate = (values) => {\n    const errors = {};\n    const requiredFields = [\n        'firstname',\n        'lastname',\n        'username',\n        'email',\n        'password',\n        'confirmPassword',\n    ];\n\n    requiredFields.forEach(field => {\n        if (!values[field] || !values[field].trim()) {\n            errors[field] = 'Required !';\n        }\n    });\n\n    if(values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username))\n        errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n    if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email))\n        errors.email = \"Invalid email address !\";\n    if(values.password && !/\\d/.test(values.password))\n        errors.password = \"Password must contain a number !\"\n    else if(values.password && !/[A-Z]/.test(values.password))\n        errors.password = \"Password must contain an uppercase letter !\"\n    else if(values.password && !/[a-z]/.test(values.password))\n        errors.password = \"Password must contain a lowercase letter !\"\n    else if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n        errors.password = \"Password must contain a special character !\"\n    else if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n        errors.password = \"Password must contain 8-20 characters !\"\n    if(values.confirmPassword && values.password !== values.confirmPassword)\n        errors.confirmPassword = \"Passwords does not match !\"\n    return errors;\n}\n\nconst mapStateToProps = (state) => (\n{\n    \"form\" : state.form,\n    \"status\" : state.register\n});\nconst mapDispatchToProps = {\n    \"registerAction\": InscriptionAction\n};\nconst mergeProps = (stateProps, dispatchProps, otherProps)=> ({\n    ...stateProps,\n    ...dispatchProps,\n    ...otherProps,\n    \"handleSubmit\" : otherProps.handleSubmit((form)=>{\n        dispatchProps.registerAction(form);\n    })\n});\n\nconst connectedRegisterContainer = connect(mapStateToProps, mapDispatchToProps,mergeProps)(Register); \nconst RegisterContainer = reduxForm({\n    form : \"register\",\n    \"destroyOnUnmount\": true,  \n    validate,\n    \"asyncValidate\": asyncValidateAll,\n    \"asyncBlurFields\": [\"username\", \"email\"]\n\n})(connectedRegisterContainer);\n\n\nexport default RegisterContainer;"]},"metadata":{},"sourceType":"module"}