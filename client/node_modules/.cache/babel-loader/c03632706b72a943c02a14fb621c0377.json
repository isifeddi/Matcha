{"ast":null,"code":"import { takeLatest, put } from \"redux-saga/effects\";\nimport { push } from \"react-router-redux\";\nimport { inscriptionError, inscriptionUserSuccess, EmailConfirmationSuccess, EmailConfirmationError } from \"../actions/registerAction\";\nimport axios from 'axios'; // import {request} from \"./helper\";\n\nconst inscription = function* inscription({\n  data\n}) {\n  try {\n    //   const response = yield call(request, {\n    //     \"url\": \"/api/auth/signup\",\n    //     data,\n    //     \"method\": \"post\"\n    //   });\n    const response = yield axios.post('http://localhost:5000/register', data);\n    console.log(response);\n\n    if (response.data.isValid) {\n      yield put(inscriptionUserSuccess(data));\n      yield put(push(\"/login\"));\n    } else {\n      if (response.data.errUsername) {\n        yield put(inscriptionError(response.data.errUsername));\n      }\n\n      if (!response.data.errEmail) {\n        yield put(inscriptionError(response.data.errEmail));\n      }\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(inscriptionError(\"error.response.statusText\", \"error.response.status\"));\n    }\n  }\n};\n\nconst emailConfirm = function* emailConfirm({\n  token\n}) {\n  try {\n    const response = yield axios.post('http://localhost:5000/confirmEmail', {\n      token\n    });\n\n    if (response.data === 'success') {\n      yield put(EmailConfirmationSuccess());\n    } else if (response.data === 'error') {\n      yield put(EmailConfirmationError());\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(EmailConfirmationError());\n    }\n  }\n};\n\nexport default function* () {\n  yield takeLatest(\"INSCRIPTION_USER\", inscription);\n  yield takeLatest(\"EMAIL_CONFIRMATION\", emailConfirm);\n}","map":{"version":3,"sources":["/Users/ibouroum/Desktop/Matcha/client/src/sagas/registerSaga.js"],"names":["takeLatest","put","push","inscriptionError","inscriptionUserSuccess","EmailConfirmationSuccess","EmailConfirmationError","axios","inscription","data","response","post","console","log","isValid","errUsername","errEmail","error","emailConfirm","token"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,QAA8B,oBAA9B;AACA,SAAQC,IAAR,QAAmB,oBAAnB;AACA,SAAQC,gBAAR,EAA0BC,sBAA1B,EAAkDC,wBAAlD,EAA4EC,sBAA5E,QAAyG,2BAAzG;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,MAAMC,WAAW,GACf,UAAUA,WAAV,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAA+B;AAC7B,MAAI;AACJ;AACA;AACA;AACA;AACA;AACE,UAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAW,gCAAX,EAA6CF,IAA7C,CAAvB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;;AACA,QAAGA,QAAQ,CAACD,IAAT,CAAcK,OAAjB,EAAyB;AACvB,YAAMb,GAAG,CAACG,sBAAsB,CAACK,IAAD,CAAvB,CAAT;AACA,YAAMR,GAAG,CAACC,IAAI,CAAC,QAAD,CAAL,CAAT;AACD,KAHD,MAII;AACF,UAAGQ,QAAQ,CAACD,IAAT,CAAcM,WAAjB,EAA6B;AAC3B,cAAMd,GAAG,CAACE,gBAAgB,CAACO,QAAQ,CAACD,IAAT,CAAcM,WAAf,CAAjB,CAAT;AACD;;AACD,UAAG,CAACL,QAAQ,CAACD,IAAT,CAAcO,QAAlB,EAA2B;AACzB,cAAMf,GAAG,CAACE,gBAAgB,CAACO,QAAQ,CAACD,IAAT,CAAcO,QAAf,CAAjB,CAAT;AACD;AACF;AAEF,GArBD,CAqBC,OAAOC,KAAP,EAAc;AACb,QAAIA,KAAK,CAACP,QAAV,EAAoB;AAClB,YAAMT,GAAG,CAACE,gBAAgB,CAAC,2BAAD,EAA8B,uBAA9B,CAAjB,CAAT;AACD;AACF;AACF,CA5BH;;AA8BA,MAAMe,YAAY,GAClB,UAAUA,YAAV,CAAwB;AAACC,EAAAA;AAAD,CAAxB,EAAiC;AAC/B,MAAI;AACF,UAAMT,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAW,oCAAX,EAAiD;AAACQ,MAAAA;AAAD,KAAjD,CAAvB;;AACA,QAAGT,QAAQ,CAACD,IAAT,KAAkB,SAArB,EACA;AACE,YAAMR,GAAG,CAACI,wBAAwB,EAAzB,CAAT;AACD,KAHD,MAIK,IAAGK,QAAQ,CAACD,IAAT,KAAkB,OAArB,EACL;AACE,YAAMR,GAAG,CAACK,sBAAsB,EAAvB,CAAT;AACD;AACF,GAVD,CAUC,OAAOW,KAAP,EAAc;AACX,QAAIA,KAAK,CAACP,QAAV,EAAoB;AAClB,YAAMT,GAAG,CAACK,sBAAsB,EAAvB,CAAT;AACD;AACF;AACJ,CAjBD;;AAmBA,eAAe,aAAa;AAC1B,QAAMN,UAAU,CAAC,kBAAD,EAAqBQ,WAArB,CAAhB;AACA,QAAMR,UAAU,CAAC,oBAAD,EAAuBkB,YAAvB,CAAhB;AACD","sourcesContent":["import {takeLatest, put} from \"redux-saga/effects\";\nimport {push} from \"react-router-redux\";\nimport {inscriptionError, inscriptionUserSuccess, EmailConfirmationSuccess, EmailConfirmationError} from \"../actions/registerAction\";\nimport axios from 'axios'\n// import {request} from \"./helper\";\n\nconst inscription =\n  function *inscription ({data}) {\n    try {\n    //   const response = yield call(request, {\n    //     \"url\": \"/api/auth/signup\",\n    //     data,\n    //     \"method\": \"post\"\n    //   });\n      const response = yield axios.post('http://localhost:5000/register', data)\n      console.log(response)\n      if(response.data.isValid){\n        yield put(inscriptionUserSuccess(data));\n        yield put(push(\"/login\"));\n      }\n      else{\n        if(response.data.errUsername){\n          yield put(inscriptionError(response.data.errUsername));\n        }\n        if(!response.data.errEmail){\n          yield put(inscriptionError(response.data.errEmail));\n        }\n      }\n      \n    }catch (error) {\n      if (error.response) {\n        yield put(inscriptionError(\"error.response.statusText\", \"error.response.status\"));\n      }\n    }\n  };\n\nconst emailConfirm =\nfunction *emailConfirm ({token}) {\n  try {\n    const response = yield axios.post('http://localhost:5000/confirmEmail', {token});\n    if(response.data === 'success')\n    {\n      yield put(EmailConfirmationSuccess());\n    }\n    else if(response.data === 'error')\n    {\n      yield put(EmailConfirmationError());\n    }\n  }catch (error) {\n      if (error.response) {\n        yield put(EmailConfirmationError());\n      }\n    }\n};\n\nexport default function *() {\n  yield takeLatest(\"INSCRIPTION_USER\", inscription);\n  yield takeLatest(\"EMAIL_CONFIRMATION\", emailConfirm);\n}"]},"metadata":{},"sourceType":"module"}