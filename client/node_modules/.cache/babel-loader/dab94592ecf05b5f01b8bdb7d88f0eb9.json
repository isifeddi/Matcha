{"ast":null,"code":"import { takeLatest, put } from \"redux-saga/effects\"; //import { delay } from 'redux-saga/effects'\n\nimport { getImages, getImagesSuccess } from \"../actions/imagesAction\";\nimport axios from 'axios';\n\nconst getPictures = function* getPictures(user_id) {\n  try {\n    const response = yield axios.post('http://localhost:5000/getImages', {\n      user_id: user_id\n    });\n\n    if (response.data) {\n      yield put(getImagesSuccess(response.data));\n    } else {\n      yield put(getImages(false));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(getImages(error.response));\n    }\n  }\n};\n\nexport default function* () {\n  yield takeLatest(\"GET_IMAGES\", getPictures);\n}","map":{"version":3,"sources":["/Users/ibouroum/Desktop/Matcha/client/src/sagas/imagesSaga.js"],"names":["takeLatest","put","getImages","getImagesSuccess","axios","getPictures","user_id","response","post","data","error"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC,C,CACA;;AACA,SAAQC,SAAR,EAAkBC,gBAAlB,QAAyC,yBAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GACf,UAAUA,WAAV,CAAuBC,OAAvB,EAAgC;AAC9B,MAAI;AACA,UAAMC,QAAQ,GAAI,MAAMH,KAAK,CAACI,IAAN,CAAW,iCAAX,EAA6C;AAACF,MAAAA,OAAO,EAAGA;AAAX,KAA7C,CAAxB;;AACA,QAAGC,QAAQ,CAACE,IAAZ,EACA;AACI,YAAMR,GAAG,CAACE,gBAAgB,CAACI,QAAQ,CAACE,IAAV,CAAjB,CAAT;AACH,KAHD,MAKA;AACI,YAAMR,GAAG,CAACC,SAAS,CAAC,KAAD,CAAV,CAAT;AACH;AACJ,GAVD,CAUC,OAAOQ,KAAP,EAAc;AACb,QAAIA,KAAK,CAACH,QAAV,EAAoB;AAClB,YAAMN,GAAG,CAACC,SAAS,CAACQ,KAAK,CAACH,QAAP,CAAV,CAAT;AACD;AACF;AACJ,CAjBD;;AAkBA,eAAe,aAAa;AACxB,QAAMP,UAAU,CAAC,YAAD,EAAeK,WAAf,CAAhB;AACD","sourcesContent":["import { takeLatest, put } from \"redux-saga/effects\";\n//import { delay } from 'redux-saga/effects'\nimport {getImages,getImagesSuccess} from \"../actions/imagesAction\";\nimport axios from 'axios';\n\nconst getPictures =\n  function *getPictures (user_id) {\n    try {\n        const response  = yield axios.post('http://localhost:5000/getImages',{user_id : user_id});\n        if(response.data)\n        {\n            yield put(getImagesSuccess(response.data));\n        }\n        else\n        {\n            yield put(getImages(false));\n        }\n    }catch (error) {\n      if (error.response) {\n        yield put(getImages(error.response));\n      }\n    }\n};\nexport default function *() {\n    yield takeLatest(\"GET_IMAGES\", getPictures);\n  }"]},"metadata":{},"sourceType":"module"}