{"ast":null,"code":"import { takeLatest, put } from \"redux-saga/effects\";\nimport { decodeTokenSuccess, decodeTokenError } from \"../actions/decodeAction\";\nimport axios from 'axios';\n\nconst decodeToken = function* decodeToken(token) {\n  try {\n    const decoded = yield axios.post('http://localhost:5000/decodeToken', {\n      token: token\n    });\n\n    if (decoded && decoded !== 'Invalid signature') {\n      yield put(decodeTokenSuccess(decoded));\n    } else {\n      yield put(decodeTokenError('error'));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(decodeTokenError(\"error.response.statusText\", \"error.response.status\"));\n    }\n  }\n};\n\nexport default function* () {\n  yield takeLatest(\"DECODE_TOKEN\", decodeToken);\n}","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/sagas/decodeSaga.js"],"names":["takeLatest","put","decodeTokenSuccess","decodeTokenError","axios","decodeToken","token","decoded","post","error","response"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,yBAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GACf,UAAUA,WAAV,CAAuBC,KAAvB,EAA8B;AAC5B,MAAI;AACA,UAAMC,OAAO,GAAI,MAAMH,KAAK,CAACI,IAAN,CAAW,mCAAX,EAAgD;AAACF,MAAAA,KAAK,EAAEA;AAAR,KAAhD,CAAvB;;AACA,QAAGC,OAAO,IAAIA,OAAO,KAAK,mBAA1B,EACA;AACI,YAAMN,GAAG,CAACC,kBAAkB,CAACK,OAAD,CAAnB,CAAT;AACH,KAHD,MAKA;AACI,YAAMN,GAAG,CAACE,gBAAgB,CAAC,OAAD,CAAjB,CAAT;AACH;AACJ,GAVD,CAUC,OAAOM,KAAP,EAAc;AACb,QAAIA,KAAK,CAACC,QAAV,EAAoB;AAClB,YAAMT,GAAG,CAACE,gBAAgB,CAAC,2BAAD,EAA8B,uBAA9B,CAAjB,CAAT;AACD;AACF;AACF,CAjBH;;AAmBA,eAAe,aAAa;AAC1B,QAAMH,UAAU,CAAC,cAAD,EAAiBK,WAAjB,CAAhB;AACD","sourcesContent":["import { takeLatest, put } from \"redux-saga/effects\";\nimport { decodeTokenSuccess, decodeTokenError } from \"../actions/decodeAction\";\nimport axios from 'axios';\n\nconst decodeToken =\n  function *decodeToken (token) {\n    try {\n        const decoded  = yield axios.post('http://localhost:5000/decodeToken', {token: token});\n        if(decoded && decoded !== 'Invalid signature')\n        {\n            yield put(decodeTokenSuccess(decoded));\n        }\n        else\n        {\n            yield put(decodeTokenError('error'));\n        }\n    }catch (error) {\n      if (error.response) {\n        yield put(decodeTokenError(\"error.response.statusText\", \"error.response.status\"));\n      }\n    }\n  };\n\nexport default function *() {\n  yield takeLatest(\"DECODE_TOKEN\", decodeToken);\n}"]},"metadata":{},"sourceType":"module"}