{"ast":null,"code":"var _jsxFileName = \"/Users/isifeddi/Desktop/Matcha-i2/client/src/containers/completeProfile/localisation.js\";\nimport React, { Component } from 'react';\nimport Localisation from '../../components/completeProfile/localisation';\nimport { connect } from \"react-redux\";\nimport { getLoc } from \"../../actions/addInfoAction\";\n\nclass LocalisationContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userLocation: {\n        lat: 32,\n        lng: 32\n      },\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    };\n    navigator.geolocation.getCurrentPosition(position => {\n      const _position$coords = position.coords,\n            latitude = _position$coords.latitude,\n            longitude = _position$coords.longitude,\n            accuracy = _position$coords.accuracy;\n      this.setState({\n        userLocation: {\n          lat: latitude,\n          lng: longitude\n        },\n        loading: false\n      });\n      console.log('Votre position actuelle est :');\n      console.log(`Latitude : ${latitude}`);\n      console.log(`Longitude : ${longitude}`);\n      console.log(`La précision est de ${accuracy} mètres.`);\n    }, err => {\n      this.setState({\n        userLocation: {\n          lat: 32.8781004,\n          lng: -6.8887306\n        },\n        loading: false\n      });\n      console.warn(`ERREUR (${err.code}): ${err.message}`);\n    }, options); //axios.get('http://ipinfo.io/json').then(res => console.log(res)).catch(err => console.log(err));\n  }\n\n  render() {\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          userLocation = _this$state.userLocation;\n    if (loading) return null;\n    return React.createElement(Localisation, {\n      userL: userLocation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  \"user\": state.user\n});\n\nconst mapDispatchToProps = {\n  getLoc: getLoc\n};\nLocalisationContainer = connect(mapStateToProps, mapDispatchToProps)(Localisation);\nexport default LocalisationContainer;","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha-i2/client/src/containers/completeProfile/localisation.js"],"names":["React","Component","Localisation","connect","getLoc","LocalisationContainer","state","userLocation","lat","lng","loading","componentDidMount","options","enableHighAccuracy","timeout","maximumAge","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","accuracy","setState","console","log","err","warn","code","message","render","mapStateToProps","user","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,MAAR,QAAqB,6BAArB;;AAEA,MAAMC,qBAAN,SAAoCJ,SAApC,CAA6C;AAAA;AAAA;AAAA,SACzCK,KADyC,GACjC;AAAEC,MAAAA,YAAY,EAAE;AAAEC,QAAAA,GAAG,EAAE,EAAP;AAAWC,QAAAA,GAAG,EAAE;AAAhB,OAAhB;AAAsCC,MAAAA,OAAO,EAAE;AAA/C,KADiC;AAAA;;AAGzCC,EAAAA,iBAAiB,GAAE;AACf,UAAMC,OAAO,GAAG;AACZC,MAAAA,kBAAkB,EAAE,IADR;AAEZC,MAAAA,OAAO,EAAE,IAFG;AAGZC,MAAAA,UAAU,EAAE;AAHA,KAAhB;AAKAC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACIC,QAAQ,IAAI;AAAA,+BACkCA,QAAQ,CAACC,MAD3C;AAAA,YACAC,QADA,oBACAA,QADA;AAAA,YACUC,SADV,oBACUA,SADV;AAAA,YACqBC,QADrB,oBACqBA,QADrB;AAER,WAAKC,QAAL,CAAc;AACVjB,QAAAA,YAAY,EAAE;AAAEC,UAAAA,GAAG,EAAEa,QAAP;AAAiBZ,UAAAA,GAAG,EAAEa;AAAtB,SADJ;AAEVZ,QAAAA,OAAO,EAAE;AAFC,OAAd;AAIAe,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAa,cAAaL,QAAS,EAAnC;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAa,eAAcJ,SAAU,EAArC;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBH,QAAS,UAA5C;AACH,KAXL,EAYII,GAAG,IAAI;AACH,WAAKH,QAAL,CAAc;AACVjB,QAAAA,YAAY,EAAE;AAAEC,UAAAA,GAAG,EAAE,UAAP;AAAmBC,UAAAA,GAAG,EAAE,CAAC;AAAzB,SADJ;AAEVC,QAAAA,OAAO,EAAE;AAFC,OAAd;AAIAe,MAAAA,OAAO,CAACG,IAAR,CAAc,WAAUD,GAAG,CAACE,IAAK,MAAKF,GAAG,CAACG,OAAQ,EAAlD;AACH,KAlBL,EAmBIlB,OAnBJ,EANe,CA2Bf;AACH;;AACDmB,EAAAA,MAAM,GAAE;AAAA,wBAC4B,KAAKzB,KADjC;AAAA,UACGI,OADH,eACGA,OADH;AAAA,UACYH,YADZ,eACYA,YADZ;AAEJ,QAAGG,OAAH,EAAY,OAAO,IAAP;AACZ,WACE,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEH,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGH;;AAtCwC;;AAyC7C,MAAMyB,eAAe,GAAI1B,KAAD,KACxB;AACI,UAAQA,KAAK,CAAC2B;AADlB,CADwB,CAAxB;;AAIA,MAAMC,kBAAkB,GAAG;AACvB9B,EAAAA,MAAM,EAAEA;AADe,CAA3B;AAIAC,qBAAqB,GAAGF,OAAO,CAAC6B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ChC,YAA7C,CAAxB;AAEA,eAAeG,qBAAf","sourcesContent":["import React, { Component } from 'react';\nimport Localisation from '../../components/completeProfile/localisation';\nimport {connect} from \"react-redux\";\nimport {getLoc} from \"../../actions/addInfoAction\";\n\nclass LocalisationContainer extends Component{\n    state = { userLocation: { lat: 32, lng: 32 }, loading: true};\n    \n    componentDidMount(){\n        const options = {\n            enableHighAccuracy: true,\n            timeout: 5000,\n            maximumAge: 0\n        };\n        navigator.geolocation.getCurrentPosition(\n            position => {\n                const { latitude, longitude, accuracy } = position.coords;\n                this.setState({\n                    userLocation: { lat: latitude, lng: longitude },\n                    loading: false\n                });\n                console.log('Votre position actuelle est :');\n                console.log(`Latitude : ${latitude}`);\n                console.log(`Longitude : ${longitude}`);\n                console.log(`La précision est de ${accuracy} mètres.`);\n            },\n            err => {\n                this.setState({\n                    userLocation: { lat: 32.8781004, lng: -6.8887306 },\n                    loading: false\n                });\n                console.warn(`ERREUR (${err.code}): ${err.message}`);\n            },\n            options\n        );\n        //axios.get('http://ipinfo.io/json').then(res => console.log(res)).catch(err => console.log(err));\n    }\n    render(){\n        const {loading, userLocation} = this.state;\n        if(loading) return null;\n        return (\n          <Localisation userL={userLocation}/>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => (\n{\n    \"user\": state.user\n});\nconst mapDispatchToProps = {\n    getLoc: getLoc\n};\n\nLocalisationContainer = connect(mapStateToProps, mapDispatchToProps)(Localisation);\n\nexport default LocalisationContainer;"]},"metadata":{},"sourceType":"module"}