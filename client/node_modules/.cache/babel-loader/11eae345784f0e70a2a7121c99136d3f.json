{"ast":null,"code":"import _defineProperty from \"/Volumes/Storage/goinfre/isifeddi/dd/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport AddInfo from '../../components/completeProfile/addInfo';\nimport { connect } from \"react-redux\";\nimport { reduxForm } from 'redux-form';\nimport { createOption, addInfo } from '../../actions/addInfoAction';\n\nconst validate = values => {\n  const errors = {};\n  const requiredFields = ['gender', 'sexOrient', 'birthday', 'bio'];\n  const requiredArr = ['interests'];\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  requiredArr.forEach(field => {\n    if (!values[field]) {\n      errors[field] = 'Required !';\n    }\n  });\n  if (values.bio && !/^.{1,200}$/.test(values.bio)) errors.bio = 'maximum 200 characters';\n  if (values.birthday && !/([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/.test(values.birthday)) errors.birthday = 'Invalid date !';\n  let today = new Date();\n  let birthDate = new Date(values.birthday);\n  let age = today.getFullYear() - birthDate.getFullYear();\n  let m = today.getMonth() - birthDate.getMonth();\n\n  if (m < 0 || m === 0 && today.getDate() < birthDate.getDate()) {\n    age--;\n  }\n\n  if (age < 18) errors.birthday = \"Come back when you're 18 ;)\";\n  if (age > 120) errors.birthday = 'Invalid age !';\n  return errors;\n};\n\nconst mapStateToProps = state => ({\n  'values': state.form.values,\n  'selectOptions': state.select.selectOptions,\n  'selectLoading': state.select.selectLoading,\n  'selectError': state.select.error,\n  'userData': state.userData,\n  'user': state.login.user\n});\n\nconst mapDispatchToProps = {\n  \"addInfo\": addInfo,\n  \"createOption\": createOption\n};\n\nconst mergeProps = (stateProps, dispatchProps, otherProps) => _objectSpread({}, stateProps, {}, dispatchProps, {}, otherProps, {\n  \"handleSubmit\": otherProps.handleSubmit(values => {\n    dispatchProps.addInfo(values, stateProps.user);\n  })\n});\n\nconst connectedAddInfoContainer = connect(mapStateToProps, mapDispatchToProps, mergeProps)(AddInfo);\nlet AddInfoContainer = reduxForm({\n  form: \"addInfo\",\n  destroyOnUnmount: true,\n  validate\n})(connectedAddInfoContainer);\nAddInfoContainer = connect(state => ({\n  initialValues: {\n    gender:\n    /*state.userData ? state.userData.gender : */\n    state.user.gender,\n    sexOrient:\n    /*state.userData ? state.userData.sexOrient : */\n    state.user.sexOrient,\n    birthday:\n    /*state.userData ? state.userData.birthday : */\n    state.user.birthday,\n    bio:\n    /*state.userData ? state.userData.bio : */\n    state.user.bio,\n    interests:\n    /*state.userData ? state.userData.interests : */\n    state.user.interests\n  }\n}))(AddInfoContainer);\nexport default AddInfoContainer;","map":{"version":3,"sources":["/Volumes/Storage/goinfre/isifeddi/dd/client/src/containers/completeProfile/addInfo.js"],"names":["AddInfo","connect","reduxForm","createOption","addInfo","validate","values","errors","requiredFields","requiredArr","forEach","field","trim","bio","test","birthday","today","Date","birthDate","age","getFullYear","m","getMonth","getDate","mapStateToProps","state","form","select","selectOptions","selectLoading","error","userData","login","user","mapDispatchToProps","mergeProps","stateProps","dispatchProps","otherProps","handleSubmit","connectedAddInfoContainer","AddInfoContainer","destroyOnUnmount","initialValues","gender","sexOrient","interests"],"mappings":"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","sourcesContent":["import AddInfo from '../../components/completeProfile/addInfo';\nimport {connect} from \"react-redux\";\nimport {reduxForm} from 'redux-form';\n\nimport {createOption, addInfo} from '../../actions/addInfoAction';\n\nconst validate = (values) => {\n    const errors = {};\n    const requiredFields = [\n        'gender',\n        'sexOrient',\n        'birthday',\n        'bio',\n    ];\n    const requiredArr = [\n        'interests'\n    ];\n    requiredFields.forEach(field => {\n        if (!values[field] || !values[field].trim()) {\n            errors[field] = 'Required !';\n        }\n    });\n    requiredArr.forEach(field => {\n        if (!values[field]) {\n            errors[field] = 'Required !';\n        }\n    });\n\n    if(values.bio && !/^.{1,200}$/.test(values.bio))\n        errors.bio = 'maximum 200 characters';\n\n    if(values.birthday && !/([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/.test(values.birthday))\n        errors.birthday = 'Invalid date !';\n    let today = new Date();\n    let birthDate = new Date(values.birthday);\n    let age = today.getFullYear() - birthDate.getFullYear();\n    let m = today.getMonth() - birthDate.getMonth();\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n    }\n    if(age < 18)\n        errors.birthday = \"Come back when you're 18 ;)\"\n    if(age > 120)\n        errors.birthday = 'Invalid age !'\n\n    return errors;\n}\n\nconst mapStateToProps = (state) => (\n{\n    'values' : state.form.values,\n    'selectOptions': state.select.selectOptions,\n    'selectLoading': state.select.selectLoading,\n    'selectError' : state.select.error,\n    'userData': state.userData,\n    'user': state.login.user,\n});\nconst mapDispatchToProps = {\n    \"addInfo\": addInfo,\n    \n    \"createOption\": createOption,\n};\nconst mergeProps = (stateProps, dispatchProps, otherProps) => ({\n    ...stateProps,\n    ...dispatchProps,\n    ...otherProps,\n\n    \"handleSubmit\" : otherProps.handleSubmit((values) => {\n        dispatchProps.addInfo(values, stateProps.user);\n    }),\n});\n\nconst connectedAddInfoContainer = connect(mapStateToProps, mapDispatchToProps, mergeProps)(AddInfo);\n\nlet AddInfoContainer = reduxForm ({\n    form : \"addInfo\",\n    destroyOnUnmount: true,\n    validate,\n})(connectedAddInfoContainer);\n\nAddInfoContainer = connect(\n    state => ({\n        initialValues: {\n            gender: /*state.userData ? state.userData.gender : */state.user.gender,\n            sexOrient: /*state.userData ? state.userData.sexOrient : */state.user.sexOrient,\n            birthday: /*state.userData ? state.userData.birthday : */state.user.birthday,\n            bio: /*state.userData ? state.userData.bio : */state.user.bio,\n            interests: /*state.userData ? state.userData.interests : */state.user.interests,\n        },\n    }),\n)(AddInfoContainer);\n\nexport default AddInfoContainer;"]},"metadata":{},"sourceType":"module"}