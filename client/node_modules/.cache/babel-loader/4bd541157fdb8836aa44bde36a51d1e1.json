{"ast":null,"code":"import { takeLatest, put, select } from \"redux-saga/effects\"; //import { delay } from 'redux-saga/effects'\n\nimport { setProfilePicError, getImages, getImagesSuccess, getImagesError, sendImagesError, delImagesError } from \"../actions/imagesAction\";\nimport axios from 'axios';\n\nconst getPictures = function* getPictures({\n  user_id\n}) {\n  try {\n    const response = yield axios.post('http://localhost:5000/getImages', {\n      user_id: user_id\n    });\n\n    if (response.data.length > 0) {\n      yield put(getImagesSuccess(response.data));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(getImagesError(error.response));\n    }\n  }\n};\n\nconst sendPictures = function* sendPictures({\n  data\n}) {\n  try {\n    const user_id = yield select(state => state.user.id); //console.log('user'+user_id)\n    //const headers = {'Content-Type': 'multipart/form-data'};\n\n    const response = yield axios.post('http://localhost:5000/upload', data);\n\n    if (response.data) {\n      console.log(response.data);\n      yield put(getImages(user_id));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(sendImagesError(error.response));\n    }\n  }\n};\n\nconst delPictures = function* delPictures({\n  img\n}) {\n  try {\n    const user_id = yield select(state => state.user.id); //console.log('img'+img.id)\n\n    const data = {\n      user_id: user_id,\n      img_id: img.imgId,\n      isProfilePic: img.isProfilePic\n    };\n    const headers = {\n      'Content-Type': 'multipart/form-data'\n    };\n    const response = yield axios.post('http://localhost:5000/deleteImages', data, headers);\n\n    if (response.data) {\n      yield put(getImages(user_id));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(delImagesError(error.response));\n    }\n  }\n};\n\nconst setProfilePicture = function* setProfilePicture({\n  imgId\n}) {\n  try {\n    const user_id = yield select(state => state.user.id);\n    const data = {\n      user_id: user_id,\n      img_id: imgId\n    };\n    console.log(data);\n    const headers = {\n      'Content-Type': 'multipart/form-data'\n    };\n    const response = yield axios.post('http://localhost:5000/setProfilePicture', data, headers);\n\n    if (response.data) {\n      yield put(getImages(user_id));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(setProfilePicError(error.response));\n    }\n  }\n};\n\nexport default function* () {\n  yield takeLatest(\"GET_IMAGES\", getPictures);\n  yield takeLatest(\"SEND_IMAGES\", sendPictures);\n  yield takeLatest(\"DEL_IMAGES\", delPictures);\n  yield takeLatest(\"SET_PROFILE_PIC\", setProfilePicture);\n}","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/sagas/imagesSaga.js"],"names":["takeLatest","put","select","setProfilePicError","getImages","getImagesSuccess","getImagesError","sendImagesError","delImagesError","axios","getPictures","user_id","response","post","data","length","error","sendPictures","state","user","id","console","log","delPictures","img","img_id","imgId","isProfilePic","headers","setProfilePicture"],"mappings":"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","sourcesContent":["import { takeLatest, put ,select} from \"redux-saga/effects\";\n//import { delay } from 'redux-saga/effects'\nimport {setProfilePicError,getImages,getImagesSuccess,getImagesError,sendImagesError,delImagesError} from \"../actions/imagesAction\";\nimport axios from 'axios';\n\nconst getPictures =\n  function *getPictures ({user_id}) {\n    try {\n        const response  = yield axios.post('http://localhost:5000/getImages',{user_id : user_id});\n        if(response.data.length > 0)\n        {\n            yield put(getImagesSuccess(response.data));\n        }\n       \n    }catch (error) {\n      if (error.response) {\n        yield put(getImagesError(error.response));\n      }\n    }\n};\nconst sendPictures =\n  function *sendPictures ({data}) {\n    try {\n      const user_id = yield select(state => state.user.id);\n     //console.log('user'+user_id)\n      //const headers = {'Content-Type': 'multipart/form-data'};\n        const response  = yield axios.post('http://localhost:5000/upload',data);\n        if(response.data)\n        {\n          console.log(response.data)\n          yield put(getImages(user_id));\n        }\n       \n    }catch (error) {\n      if (error.response) {\n        yield put(sendImagesError(error.response));\n      }\n    }\n};\nconst delPictures =\n  function *delPictures ({img}) {\n    try {\n      const user_id = yield select(state => state.user.id);\n    //console.log('img'+img.id)\n      const data = {\n        user_id : user_id,\n        img_id : img.imgId,\n        isProfilePic : img.isProfilePic\n    }\n      const headers = {'Content-Type': 'multipart/form-data'};\n        const response  = yield axios.post('http://localhost:5000/deleteImages',data,headers);\n        if(response.data)\n        {\n          yield put(getImages(user_id));\n        }\n    }catch (error) {\n      if (error.response) {\n        yield put(delImagesError(error.response));\n      }\n    }\n};\nconst setProfilePicture =\n  function *setProfilePicture ({imgId}) {\n    try {\n\n      const user_id = yield select(state => state.user.id);\n      const data = {\n        user_id : user_id,\n        img_id : imgId\n    }\n    console.log(data)\n      const headers = {'Content-Type': 'multipart/form-data'};\n        const response  = yield axios.post('http://localhost:5000/setProfilePicture',data,headers);\n        if(response.data)\n        {\n          yield put(getImages(user_id));\n        }\n    }catch (error) {\n      if (error.response) {\n        yield put(setProfilePicError(error.response));\n      }\n    }\n};\nexport default function *() {\n    yield takeLatest(\"GET_IMAGES\", getPictures);\n    yield takeLatest(\"SEND_IMAGES\", sendPictures);\n    yield takeLatest(\"DEL_IMAGES\",delPictures);\n    yield takeLatest(\"SET_PROFILE_PIC\",setProfilePicture);\n  }"]},"metadata":{},"sourceType":"module"}