{"ast":null,"code":"import { put, takeLatest, call } from \"redux-saga/effects\";\nimport { select } from 'redux-saga/effects';\nimport { request } from './helper';\nimport { getUsersSuccess, getUsersError, deleteUser, getBlockUserSuccess } from '../actions/userAction';\nexport const getUsers = function* getUsers() {\n  try {\n    const user = yield select(state => state.user);\n    const response = yield call(request, {\n      \"url\": \"http://localhost:5000/getUsers\",\n      \"data\": {\n        id: user.id\n      },\n      \"method\": \"post\"\n    });\n\n    if (response) {\n      yield put(getUsersSuccess(response.data));\n    } else yield put(getUsersError('there has been an error'));\n  } catch (error) {\n    yield put(getUsersError('there has been an error'));\n  }\n};\nexport const blockUser = function* blockUser({\n  blocked_user_id\n}) {\n  try {\n    const user = yield select(state => state.user);\n    const response = yield call(request, {\n      \"url\": \"http://localhost:5000/blockUser\",\n      \"data\": {\n        id: user.id,\n        blocked_user_id: blocked_user_id\n      },\n      \"method\": \"post\"\n    });\n\n    if (response) {\n      yield put(deleteUser(blocked_user_id));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getBlockUser = function* getBlockUser() {\n  try {\n    const user = yield select(state => state.user);\n    const response = yield call(request, {\n      \"url\": \"http://localhost:5000/getBlockUser\",\n      \"data\": {\n        id: user.id\n      },\n      \"method\": \"post\"\n    });\n\n    if (response) {\n      //console.log(response.data)\n      yield put(getBlockUserSuccess(response.data));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likeUser = function* likeUser({\n  liked_user_id\n}) {\n  try {\n    const user = yield select(state => state.user);\n    const response = yield call(request, {\n      \"url\": \"http://localhost:5000/likeUser\",\n      \"data\": {\n        id: user.id,\n        liked_user_id: liked_user_id\n      },\n      \"method\": \"post\"\n    });\n\n    if (response) {\n      yield put(deleteUser(liked_user_id));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const reportUser = function* reportUser({\n  reported_user_id\n}) {\n  try {\n    const user = yield select(state => state.user);\n    const response = yield call(request, {\n      \"url\": \"http://localhost:5000/reportUser\",\n      \"data\": {\n        id: user.id,\n        reported_user_id: reported_user_id\n      },\n      \"method\": \"post\"\n    });\n\n    if (response) {\n      yield put(deleteUser(reported_user_id));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const viewProfileUser = function* viewProfileUser({\n  viewed_user_id\n}) {\n  try {\n    const user = yield select(state => state.user);\n    const response = yield call(request, {\n      \"url\": \"http://localhost:5000/viewProfileUser\",\n      \"data\": {\n        id: user.id,\n        viewed_user_id: viewed_user_id\n      },\n      \"method\": \"post\"\n    });\n\n    if (response) {}\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport default function* () {\n  yield takeLatest(\"GET_USERS\", getUsers);\n  yield takeLatest(\"BLOCK_USER\", blockUser);\n  yield takeLatest(\"LIKE_USER\", likeUser);\n  yield takeLatest(\"REPORT_USER\", reportUser);\n  yield takeLatest(\"VIEW_PROFILE_USER\", viewProfileUser);\n  yield takeLatest(\"GET_BLOCK_USER\", getBlockUser);\n}","map":{"version":3,"sources":["/Users/ibouroum/Desktop/Matcha/client/src/sagas/usersSaga.js"],"names":["put","takeLatest","call","select","request","getUsersSuccess","getUsersError","deleteUser","getBlockUserSuccess","getUsers","user","state","response","id","data","error","blockUser","blocked_user_id","console","log","getBlockUser","likeUser","liked_user_id","reportUser","reported_user_id","viewProfileUser","viewed_user_id"],"mappings":"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","sourcesContent":["import {put, takeLatest,call} from \"redux-saga/effects\";\n\nimport { select } from 'redux-saga/effects'; \nimport {request} from './helper';\nimport { getUsersSuccess,getUsersError,deleteUser,getBlockUserSuccess} from '../actions/userAction';\nexport const getUsers =\n    function *getUsers () {\n        try {\n            const user = yield select(state => state.user);\n            const response = yield call(request, {\n                \"url\": \"http://localhost:5000/getUsers\",\n                \"data\": {id : user.id},\n                \"method\": \"post\"\n              });\n            if(response)\n            {\n                yield put(getUsersSuccess(response.data));\n            }\n            else\n                yield put(getUsersError('there has been an error'));\n        } catch (error) {\n            yield put(getUsersError('there has been an error'));\n        }\n    };\n    export const blockUser =\n    function *blockUser({blocked_user_id}) {\n        try {\n            const user = yield select(state => state.user);\n            const response = yield call(request, {\n                \"url\": \"http://localhost:5000/blockUser\",\n                \"data\": {id : user.id, blocked_user_id: blocked_user_id},\n                \"method\": \"post\"\n              });\n            if(response)\n            {\n                yield put(deleteUser(blocked_user_id));\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    };\n    export const getBlockUser =\n    function *getBlockUser() {\n        try {\n            const user = yield select(state => state.user);\n            const response = yield call(request, {\n                \"url\": \"http://localhost:5000/getBlockUser\",\n                \"data\": {id : user.id},\n                \"method\": \"post\"\n              });\n            if(response)\n            {\n                //console.log(response.data)\n                yield put(getBlockUserSuccess(response.data));\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    };\n    export const likeUser =\n    function *likeUser({liked_user_id}) {\n        try {\n            const user = yield select(state => state.user);\n            const response = yield call(request, {\n                \"url\": \"http://localhost:5000/likeUser\",\n                \"data\": {id : user.id, liked_user_id: liked_user_id},\n                \"method\": \"post\"\n              });\n            if(response)\n            {\n                yield put(deleteUser(liked_user_id));\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    };\n    export const reportUser =\n    function *reportUser({reported_user_id}) {\n        try {\n            const user = yield select(state => state.user);\n            const response = yield call(request, {\n                \"url\": \"http://localhost:5000/reportUser\",\n                \"data\": {id : user.id, reported_user_id: reported_user_id},\n                \"method\": \"post\"\n              });\n            if(response)\n            {\n                 yield put(deleteUser(reported_user_id));\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    };\n    export const viewProfileUser =\n    function *viewProfileUser({viewed_user_id}) {\n        try {\n            const user = yield select(state => state.user);\n            const response = yield call(request, {\n                \"url\": \"http://localhost:5000/viewProfileUser\",\n                \"data\": {id : user.id, viewed_user_id: viewed_user_id},\n                \"method\": \"post\"\n              });\n            if(response)\n            {\n                \n            }\n        } catch (error) {\n            console.log(error)\n        }\n    };\nexport default function *() {\n    yield takeLatest(\"GET_USERS\", getUsers);\n    yield takeLatest(\"BLOCK_USER\",blockUser);\n    yield takeLatest(\"LIKE_USER\",likeUser);\n    yield takeLatest(\"REPORT_USER\",reportUser);\n    yield takeLatest(\"VIEW_PROFILE_USER\",viewProfileUser);\n    yield takeLatest(\"GET_BLOCK_USER\",getBlockUser);\n}"]},"metadata":{},"sourceType":"module"}