{"ast":null,"code":"import { takeLatest, put } from \"redux-saga/effects\"; //import { delay } from 'redux-saga/effects'\n\nimport { getImagesSuccess, getImagesError } from \"../actions/imagesAction\";\nimport axios from 'axios';\n\nconst getPictures = function* getPictures(user_id) {\n  console.log(user_id);\n\n  try {\n    const response = yield axios.post('http://localhost:5000/getImages', {\n      user_id: user_id\n    });\n\n    if (response.data) {\n      yield put(getImagesSuccess(response.data));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(getImagesError(error.response));\n    }\n  }\n};\n\nexport default function* () {\n  yield takeLatest(\"GET_IMAGES\", getPictures);\n}","map":{"version":3,"sources":["/Users/ibouroum/Desktop/Matcha/client/src/sagas/imagesSaga.js"],"names":["takeLatest","put","getImagesSuccess","getImagesError","axios","getPictures","user_id","console","log","response","post","data","error"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC,C,CACA;;AACA,SAAQC,gBAAR,EAAyBC,cAAzB,QAA8C,yBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GACf,UAAUA,WAAV,CAAuBC,OAAvB,EAAgC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,MAAI;AACA,UAAMG,QAAQ,GAAI,MAAML,KAAK,CAACM,IAAN,CAAW,iCAAX,EAA6C;AAACJ,MAAAA,OAAO,EAAGA;AAAX,KAA7C,CAAxB;;AACA,QAAGG,QAAQ,CAACE,IAAZ,EACA;AACI,YAAMV,GAAG,CAACC,gBAAgB,CAACO,QAAQ,CAACE,IAAV,CAAjB,CAAT;AACH;AAEJ,GAPD,CAOC,OAAOC,KAAP,EAAc;AACb,QAAIA,KAAK,CAACH,QAAV,EAAoB;AAClB,YAAMR,GAAG,CAACE,cAAc,CAACS,KAAK,CAACH,QAAP,CAAf,CAAT;AACD;AACF;AACJ,CAfD;;AAgBA,eAAe,aAAa;AACxB,QAAMT,UAAU,CAAC,YAAD,EAAeK,WAAf,CAAhB;AACD","sourcesContent":["import { takeLatest, put } from \"redux-saga/effects\";\n//import { delay } from 'redux-saga/effects'\nimport {getImagesSuccess,getImagesError} from \"../actions/imagesAction\";\nimport axios from 'axios';\n\nconst getPictures =\n  function *getPictures (user_id) {\n    console.log(user_id)\n    try {\n        const response  = yield axios.post('http://localhost:5000/getImages',{user_id : user_id});\n        if(response.data)\n        {\n            yield put(getImagesSuccess(response.data));\n        }\n       \n    }catch (error) {\n      if (error.response) {\n        yield put(getImagesError(error.response));\n      }\n    }\n};\nexport default function *() {\n    yield takeLatest(\"GET_IMAGES\", getPictures);\n  }"]},"metadata":{},"sourceType":"module"}