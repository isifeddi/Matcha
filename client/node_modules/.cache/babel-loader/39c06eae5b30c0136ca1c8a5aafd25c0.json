{"ast":null,"code":"import axios from 'axios';\n\nconst validate = async values => {\n  const errors = {};\n  const requiredFields = ['firstname', 'lastname', 'username', 'email', 'password', 'confirmPassword'];\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  const response = await axios.post('http://localhost:5000/register', values);\n  console.log(response.data.username);\n  if (response.data.username) errors.username = 'username already exists';\n  if (response.data.email === 'email already exists') errors.email = 'email already exists';\n  if (values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username)) errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"'; // if(values.username && u === 1)\n  //     errors.username = \"username already exists\"\n\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) errors.email = \"Invalid email address !\"; // if(values.email && e === 1)\n  //     errors.email = \"email already exists\"\n\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  return errors;\n};\n\nexport default validate;","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/containers/Register/validate.js"],"names":["axios","validate","values","errors","requiredFields","forEach","field","trim","response","post","console","log","data","username","email","test","password","confirmPassword"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAG,MAAOC,MAAP,IAAkB;AAC/B,QAAMC,MAAM,GAAG,EAAf;AAEA,QAAMC,cAAc,GAAG,CACnB,WADmB,EAEnB,UAFmB,EAGnB,UAHmB,EAInB,OAJmB,EAKnB,UALmB,EAMnB,iBANmB,CAAvB;AASAA,EAAAA,cAAc,CAACC,OAAf,CAAuBC,KAAK,IAAI;AAC5B,QAAI,CAACJ,MAAM,CAACI,KAAD,CAAP,IAAkB,CAACJ,MAAM,CAACI,KAAD,CAAN,CAAcC,IAAd,EAAvB,EAA6C;AACzCJ,MAAAA,MAAM,CAACG,KAAD,CAAN,GAAgB,YAAhB;AACH;AACJ,GAJD;AAMA,QAAME,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAN,CAAW,gCAAX,EAA6CP,MAA7C,CAAvB;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAAT,CAAcC,QAA1B;AACA,MAAGL,QAAQ,CAACI,IAAT,CAAcC,QAAjB,EACIV,MAAM,CAACU,QAAP,GAAkB,yBAAlB;AACJ,MAAGL,QAAQ,CAACI,IAAT,CAAcE,KAAd,KAAwB,sBAA3B,EACIX,MAAM,CAACW,KAAP,GAAe,sBAAf;AAEJ,MAAGZ,MAAM,CAACW,QAAP,IAAmB,CAAC,qBAAqBE,IAArB,CAA0Bb,MAAM,CAACW,QAAjC,CAAvB,EACIV,MAAM,CAACU,QAAP,GAAkB,2EAAlB,CA1B2B,CA2B/B;AACA;;AACA,MAAIX,MAAM,CAACY,KAAP,IAAgB,CAAC,4CAA4CC,IAA5C,CAAiDb,MAAM,CAACY,KAAxD,CAArB,EACIX,MAAM,CAACW,KAAP,GAAe,yBAAf,CA9B2B,CA+B/B;AACA;;AACA,MAAGZ,MAAM,CAACc,QAAP,IAAmB,CAAC,KAAKD,IAAL,CAAUb,MAAM,CAACc,QAAjB,CAAvB,EACIb,MAAM,CAACa,QAAP,GAAkB,kCAAlB,CADJ,KAEK,IAAGd,MAAM,CAACc,QAAP,IAAmB,CAAC,QAAQD,IAAR,CAAab,MAAM,CAACc,QAApB,CAAvB,EACDb,MAAM,CAACa,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGd,MAAM,CAACc,QAAP,IAAmB,CAAC,QAAQD,IAAR,CAAab,MAAM,CAACc,QAApB,CAAvB,EACDb,MAAM,CAACa,QAAP,GAAkB,4CAAlB,CADC,KAEA,IAAGd,MAAM,CAACc,QAAP,IAAmB,CAAC,uCAAuCD,IAAvC,CAA4Cb,MAAM,CAACc,QAAnD,CAAvB,EACDb,MAAM,CAACa,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGd,MAAM,CAACc,QAAP,IAAmB,CAAC,uDAAuDD,IAAvD,CAA4Db,MAAM,CAACc,QAAnE,CAAvB,EACDb,MAAM,CAACa,QAAP,GAAkB,yCAAlB;AACJ,MAAGd,MAAM,CAACe,eAAP,IAA0Bf,MAAM,CAACc,QAAP,KAAoBd,MAAM,CAACe,eAAxD,EACId,MAAM,CAACc,eAAP,GAAyB,4BAAzB;AAEJ,SAAOd,MAAP;AACH,CA/CD;;AAiDA,eAAeF,QAAf","sourcesContent":["import axios from 'axios';\n\nconst validate = async (values) => {\n    const errors = {};\n\n    const requiredFields = [\n        'firstname',\n        'lastname',\n        'username',\n        'email',\n        'password',\n        'confirmPassword',\n    ];\n\n    requiredFields.forEach(field => {\n        if (!values[field] || !values[field].trim()) {\n            errors[field] = 'Required !';\n        }\n    });\n\n    const response = await axios.post('http://localhost:5000/register', values);\n    console.log(response.data.username)\n    if(response.data.username)\n        errors.username = 'username already exists'\n    if(response.data.email === 'email already exists')\n        errors.email = 'email already exists'\n\n    if(values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username))\n        errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n    // if(values.username && u === 1)\n    //     errors.username = \"username already exists\"\n    if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email))\n        errors.email = \"Invalid email address !\";\n    // if(values.email && e === 1)\n    //     errors.email = \"email already exists\"\n    if(values.password && !/\\d/.test(values.password))\n        errors.password = \"Password must contain a number !\"\n    else if(values.password && !/[A-Z]/.test(values.password))\n        errors.password = \"Password must contain an uppercase letter !\"\n    else if(values.password && !/[a-z]/.test(values.password))\n        errors.password = \"Password must contain a lowercase letter !\"\n    else if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n        errors.password = \"Password must contain a special character !\"\n    else if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n        errors.password = \"Password must contain 8-20 characters !\"\n    if(values.confirmPassword && values.password !== values.confirmPassword)\n        errors.confirmPassword = \"Passwords does not match !\"\n  \n    return errors;\n}\n\nexport default validate;"]},"metadata":{},"sourceType":"module"}