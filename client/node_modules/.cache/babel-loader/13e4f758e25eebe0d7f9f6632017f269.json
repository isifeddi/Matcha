{"ast":null,"code":"// import { createStore, combineReducers, applyMiddleware } from \"redux\";\n// import { reducer as reduxFormReducer } from \"redux-form\";\n// import createSagaMiddleware from 'redux-saga';\n// //import rootSaga from './sagas/saga'\n// const sagaMiddleware = createSagaMiddleware();\n// //sagaMiddleware.run(rootSaga);\n// const reducer = combineReducers({\n//   form : reduxFormReducer,\n// });\n// const store = (createStore)(reducer, applyMiddleware(sagaMiddleware));\n// export default store;\n\n/* global module */\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./sagas\";\nimport rootReducer from \"./reducers\";\nimport { createBrowserHistory } from \"history\";\nimport immutableTransform from \"redux-persist-transform-immutable\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nexport const history = createBrowserHistory();\nconst sagaMiddleware = createSagaMiddleware();\nconst persistConfig = {\n  \"key\": \"use-app\",\n  storage,\n  \"whitelist\": [\"loginUser\"],\n  \"transforms\": [immutableTransform({\n    \"records\": []\n  })]\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer(history));\n\nfunction configureStore(initialState) {\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const store = createStore(persistedReducer, initialState, composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware)));\n  sagaMiddleware.run(rootSaga);\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept(\"./reducers\", () => {\n      store.replaceReducer(rootReducer(history));\n    });\n  }\n\n  return store;\n}\n\nexport default store = configureStore();","map":{"version":3,"sources":["/home/isifeddi/Desktop/Maatcha/client/src/store.js"],"names":["applyMiddleware","compose","createStore","createSagaMiddleware","rootSaga","rootReducer","createBrowserHistory","immutableTransform","routerMiddleware","persistReducer","storage","history","sagaMiddleware","persistConfig","persistedReducer","configureStore","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","run","module","hot","accept","replaceReducer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;AAIA;AACA,SAAQA,eAAR,EAAyBC,OAAzB,EAAkCC,WAAlC,QAAoD,OAApD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,SAArB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,SAAQC,oBAAR,QAAmC,SAAnC;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,SAAQC,gBAAR,QAA+B,wBAA/B;AACA,SAAQC,cAAR,QAA6B,eAA7B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAO,MAAMC,OAAO,GAAGL,oBAAoB,EAApC;AAEP,MAAMM,cAAc,GAAGT,oBAAoB,EAA3C;AACA,MAAMU,aAAa,GAAG;AACpB,SAAO,SADa;AAEpBH,EAAAA,OAFoB;AAGpB,eAAa,CAAC,WAAD,CAHO;AAIpB,gBAAc,CACZH,kBAAkB,CAAC;AACjB,eAAW;AADM,GAAD,CADN;AAJM,CAAtB;AAWA,MAAMO,gBAAgB,GAAGL,cAAc,CAACI,aAAD,EAAgBR,WAAW,CAACM,OAAD,CAA3B,CAAvC;;AAGA,SAASI,cAAT,CAAyBC,YAAzB,EAAuC;AACrC,QAAMC,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+ClB,OAAxE;AACA,QAAMmB,KAAK,GAAGlB,WAAW,CACvBY,gBADuB,EAEvBE,YAFuB,EAGvBC,gBAAgB,CAACjB,eAAe,CAACQ,gBAAgB,CAACG,OAAD,CAAjB,EAA4BC,cAA5B,CAAhB,CAHO,CAAzB;AAKAA,EAAAA,cAAc,CAACS,GAAf,CAAmBjB,QAAnB;;AAEA,MAAIkB,MAAM,CAACC,GAAX,EAAgB;AACd;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,YAAlB,EAAgC,MAAM;AACpCJ,MAAAA,KAAK,CAACK,cAAN,CAAqBpB,WAAW,CAACM,OAAD,CAAhC;AACD,KAFD;AAGD;;AAED,SAAOS,KAAP;AACD;;AAED,eAAeA,KAAK,GAAGL,cAAc,EAArC","sourcesContent":["// import { createStore, combineReducers, applyMiddleware } from \"redux\";\n// import { reducer as reduxFormReducer } from \"redux-form\";\n// import createSagaMiddleware from 'redux-saga';\n// //import rootSaga from './sagas/saga'\n// const sagaMiddleware = createSagaMiddleware();\n// //sagaMiddleware.run(rootSaga);\n// const reducer = combineReducers({\n//   form : reduxFormReducer,\n\n  \n// });\n// const store = (createStore)(reducer, applyMiddleware(sagaMiddleware));\n\n// export default store;\n\n\n\n/* global module */\nimport {applyMiddleware, compose, createStore} from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./sagas\";\nimport rootReducer from \"./reducers\";\nimport {createBrowserHistory} from \"history\";\nimport immutableTransform from \"redux-persist-transform-immutable\";\nimport {routerMiddleware} from \"connected-react-router\";\nimport {persistReducer} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nexport const history = createBrowserHistory();\n\nconst sagaMiddleware = createSagaMiddleware();\nconst persistConfig = {\n  \"key\": \"use-app\",\n  storage,\n  \"whitelist\": [\"loginUser\"],\n  \"transforms\": [\n    immutableTransform({\n      \"records\": []\n    })\n  ]\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer(history));\n\n\nfunction configureStore (initialState) {\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const store = createStore(\n    persistedReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware))\n  );\n  sagaMiddleware.run(rootSaga);\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept(\"./reducers\", () => {\n      store.replaceReducer(rootReducer(history));\n    });\n  }\n\n  return store;\n}\n\nexport default store = configureStore();"]},"metadata":{},"sourceType":"module"}