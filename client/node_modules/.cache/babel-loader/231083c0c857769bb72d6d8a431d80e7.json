{"ast":null,"code":"const validate = values => {\n  const errors = {};\n  const requiredFields = ['firstname', 'lastname', 'username', 'email', 'password', 'confirmPassword'];\n  requiredFields.forEach(field => {\n    if (!values[field]) {\n      errors[field] = 'Required';\n    }\n  });\n  /*if(values.username.length < 2)\n  errors.username = 'Username must contain at least 2 characters';*/\n\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number\";\n  if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter\";\n  if (values.password && !/[a-zA-Z0-9]{6,20}/.test(values.password)) errors.password = \"Password must contain at least 6 characters\";\n  if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match\";\n  return errors;\n};\n\nexport default validate;","map":{"version":3,"sources":["/Users/ibouroum/Desktop/Matcha/client/src/containers/Register/validate.js"],"names":["validate","values","errors","requiredFields","forEach","field","email","test","password","confirmPassword"],"mappings":"AAAA,MAAMA,QAAQ,GAAIC,MAAD,IAAY;AACzB,QAAMC,MAAM,GAAG,EAAf;AAEA,QAAMC,cAAc,GAAG,CACnB,WADmB,EAEnB,UAFmB,EAGnB,UAHmB,EAInB,OAJmB,EAKnB,UALmB,EAMnB,iBANmB,CAAvB;AAQEA,EAAAA,cAAc,CAACC,OAAf,CAAuBC,KAAK,IAAI;AAC9B,QAAI,CAACJ,MAAM,CAACI,KAAD,CAAX,EAAoB;AAClBH,MAAAA,MAAM,CAACG,KAAD,CAAN,GAAgB,UAAhB;AACD;AACF,GAJD;AAKE;;;AAEA,MAAIJ,MAAM,CAACK,KAAP,IAAgB,CAAC,4CAA4CC,IAA5C,CAAiDN,MAAM,CAACK,KAAxD,CAArB,EAAqF;AACjFJ,IAAAA,MAAM,CAACI,KAAP,GAAe,uBAAf;AACH;;AACD,MAAGL,MAAM,CAACO,QAAP,IAAmB,CAAC,KAAKD,IAAL,CAAUN,MAAM,CAACO,QAAjB,CAAvB,EACEN,MAAM,CAACM,QAAP,GAAkB,gCAAlB;AACF,MAAGP,MAAM,CAACO,QAAP,IAAmB,CAAC,QAAQD,IAAR,CAAaN,MAAM,CAACO,QAApB,CAAvB,EACIN,MAAM,CAACM,QAAP,GAAkB,2CAAlB;AACJ,MAAGP,MAAM,CAACO,QAAP,IAAmB,CAAC,oBAAoBD,IAApB,CAAyBN,MAAM,CAACO,QAAhC,CAAvB,EACIN,MAAM,CAACM,QAAP,GAAkB,6CAAlB;AACJ,MAAGP,MAAM,CAACO,QAAP,IAAmB,CAAC,QAAQD,IAAR,CAAaN,MAAM,CAACO,QAApB,CAAvB,EACIN,MAAM,CAACM,QAAP,GAAkB,0CAAlB;AACJ,MAAGP,MAAM,CAACQ,eAAP,IAA0BR,MAAM,CAACO,QAAP,KAAoBP,MAAM,CAACQ,eAAxD,EACIP,MAAM,CAACO,eAAP,GAAyB,0BAAzB;AAEJ,SAAOP,MAAP;AACP,CAjCD;;AAmCA,eAAeF,QAAf","sourcesContent":["const validate = (values) => {\n    const errors = {};\n\n    const requiredFields = [\n        'firstname',\n        'lastname',\n        'username',\n        'email',\n        'password',\n        'confirmPassword',\n      ];\n      requiredFields.forEach(field => {\n        if (!values[field]) {\n          errors[field] = 'Required';\n        }\n      });\n        /*if(values.username.length < 2)\n        errors.username = 'Username must contain at least 2 characters';*/\n        if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n            errors.email = \"Invalid email address\";\n        }\n        if(values.password && !/\\d/.test(values.password))\n          errors.password = \"Password must contain a number\"\n        if(values.password && !/[A-Z]/.test(values.password))\n            errors.password = \"Password must contain an uppercase letter\"\n        if(values.password && !/[a-zA-Z0-9]{6,20}/.test(values.password))\n            errors.password = \"Password must contain at least 6 characters\"\n        if(values.password && !/[a-z]/.test(values.password))\n            errors.password = \"Password must contain a lowercase letter\"\n        if(values.confirmPassword && values.password !== values.confirmPassword)\n            errors.confirmPassword = \"Passwords does not match\"\n        \n        return errors;\n}\n\nexport default validate;"]},"metadata":{},"sourceType":"module"}