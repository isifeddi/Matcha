{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexShrink: 0,\n      width: 40,\n      height: 40,\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(20),\n      lineHeight: 1,\n      borderRadius: '50%',\n      overflow: 'hidden',\n      userSelect: 'none'\n    },\n\n    /* Styles applied to the root element if there are children and not `src` or `srcSet`. */\n    colorDefault: {\n      color: theme.palette.background.default,\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n    },\n\n    /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n    img: {\n      width: '100%',\n      height: '100%',\n      textAlign: 'center',\n      // Handle non-square image. The property isn't supported by IE 11.\n      objectFit: 'cover'\n    }\n  };\n};\nvar Avatar = React.forwardRef(function Avatar(props, ref) {\n  var alt = props.alt,\n      childrenProp = props.children,\n      classes = props.classes,\n      classNameProp = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      imgProps = props.imgProps,\n      sizes = props.sizes,\n      src = props.src,\n      srcSet = props.srcSet,\n      other = _objectWithoutProperties(props, [\"alt\", \"children\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\"]);\n\n  var children = childrenProp;\n  var img = src || srcSet;\n\n  if (img) {\n    children = React.createElement(React.Fragment, null, React.createElement(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps)), children);\n  }\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, classes.system, classNameProp, !img && classes.colorDefault),\n    ref: ref\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? Avatar.propTypes = {\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Used to render icon or text elements inside the Avatar.\n   * `src` and `alt` props will not be used and no `img` will\n   * be rendered by default.\n   *\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Attributes applied to the `img` element if the component\n   * is used to display an image.\n   */\n  imgProps: PropTypes.object,\n\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The `srcSet` attribute for the `img` element.\n   */\n  srcSet: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);","map":{"version":3,"sources":["/Users/ibouroum/Desktop/Matcha/client/node_modules/@material-ui/core/esm/Avatar/Avatar.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","withStyles","styles","theme","root","position","display","alignItems","justifyContent","flexShrink","width","height","fontFamily","typography","fontSize","pxToRem","lineHeight","borderRadius","overflow","userSelect","colorDefault","color","palette","background","default","backgroundColor","type","grey","img","textAlign","objectFit","Avatar","forwardRef","props","ref","alt","childrenProp","children","classes","classNameProp","className","_props$component","component","Component","imgProps","sizes","src","srcSet","other","createElement","Fragment","system","process","env","NODE_ENV","propTypes","string","node","object","isRequired","elementType","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexShrink: 0,\n      width: 40,\n      height: 40,\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(20),\n      lineHeight: 1,\n      borderRadius: '50%',\n      overflow: 'hidden',\n      userSelect: 'none'\n    },\n\n    /* Styles applied to the root element if there are children and not `src` or `srcSet`. */\n    colorDefault: {\n      color: theme.palette.background.default,\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n    },\n\n    /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n    img: {\n      width: '100%',\n      height: '100%',\n      textAlign: 'center',\n      // Handle non-square image. The property isn't supported by IE 11.\n      objectFit: 'cover'\n    }\n  };\n};\nvar Avatar = React.forwardRef(function Avatar(props, ref) {\n  var alt = props.alt,\n      childrenProp = props.children,\n      classes = props.classes,\n      classNameProp = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      imgProps = props.imgProps,\n      sizes = props.sizes,\n      src = props.src,\n      srcSet = props.srcSet,\n      other = _objectWithoutProperties(props, [\"alt\", \"children\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\"]);\n\n  var children = childrenProp;\n  var img = src || srcSet;\n\n  if (img) {\n    children = React.createElement(React.Fragment, null, React.createElement(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps)), children);\n  }\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, classes.system, classNameProp, !img && classes.colorDefault),\n    ref: ref\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? Avatar.propTypes = {\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Used to render icon or text elements inside the Avatar.\n   * `src` and `alt` props will not be used and no `img` will\n   * be rendered by default.\n   *\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Attributes applied to the `img` element if the component\n   * is used to display an image.\n   */\n  imgProps: PropTypes.object,\n\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The `srcSet` attribute for the `img` element.\n   */\n  srcSet: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);"]},"metadata":{},"sourceType":"module"}