{"ast":null,"code":"import { takeLatest, put } from \"redux-saga/effects\"; //import { delay } from 'redux-saga/effects'\n\nimport { getImagesSuccess, getImagesError, sendImagesSuccess, sendImagesError, delImagesError, delImagesSuccess } from \"../actions/imagesAction\";\nimport axios from 'axios';\n\nconst getPictures = function* getPictures({\n  user_id\n}) {\n  try {\n    const response = yield axios.post('http://localhost:5000/getImages', {\n      user_id: user_id\n    });\n\n    if (response.data) {\n      yield put(getImagesSuccess(response.data));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(getImagesError(error.response));\n    }\n  }\n};\n\nconst sendPictures = function* sendPictures({\n  data,\n  user_id\n}) {\n  try {\n    //console.log(data)\n    //const headers = {'Content-Type': 'multipart/form-data'};\n    const response = yield axios.post('http://localhost:5000/upload', data, {\n      headers: user_id\n    });\n\n    if (response.data) {\n      yield put(sendImagesSuccess());\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(sendImagesError(error.response));\n    }\n  }\n};\n\nconst delPictures = function* delPictures({\n  data\n}) {\n  try {\n    //console.log(data)\n    const headers = {\n      'Content-Type': 'multipart/form-data'\n    };\n    const response = yield axios.post('http://localhost:5000/deleteImages', data, headers);\n\n    if (response.data) {\n      yield put(delImagesSuccess());\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(delImagesError(error.response));\n    }\n  }\n};\n\nexport default function* () {\n  yield takeLatest(\"GET_IMAGES\", getPictures);\n  yield takeLatest(\"SEND_IMAGES\", sendPictures);\n  yield takeLatest(\"DEL_IMAGES\", delPictures);\n}","map":{"version":3,"sources":["/Users/ibouroum/Desktop/Matcha/client/src/sagas/imagesSaga.js"],"names":["takeLatest","put","getImagesSuccess","getImagesError","sendImagesSuccess","sendImagesError","delImagesError","delImagesSuccess","axios","getPictures","user_id","response","post","data","error","sendPictures","headers","delPictures"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC,C,CACA;;AACA,SAAQC,gBAAR,EAAyBC,cAAzB,EAAwCC,iBAAxC,EAA0DC,eAA1D,EAA0EC,cAA1E,EAAyFC,gBAAzF,QAAgH,yBAAhH;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GACf,UAAUA,WAAV,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAAkC;AAChC,MAAI;AACA,UAAMC,QAAQ,GAAI,MAAMH,KAAK,CAACI,IAAN,CAAW,iCAAX,EAA6C;AAACF,MAAAA,OAAO,EAAGA;AAAX,KAA7C,CAAxB;;AACA,QAAGC,QAAQ,CAACE,IAAZ,EACA;AACI,YAAMZ,GAAG,CAACC,gBAAgB,CAACS,QAAQ,CAACE,IAAV,CAAjB,CAAT;AACH;AAEJ,GAPD,CAOC,OAAOC,KAAP,EAAc;AACb,QAAIA,KAAK,CAACH,QAAV,EAAoB;AAClB,YAAMV,GAAG,CAACE,cAAc,CAACW,KAAK,CAACH,QAAP,CAAf,CAAT;AACD;AACF;AACJ,CAdD;;AAeA,MAAMI,YAAY,GAChB,UAAUA,YAAV,CAAwB;AAACF,EAAAA,IAAD;AAAMH,EAAAA;AAAN,CAAxB,EAAwC;AACtC,MAAI;AACH;AACC;AACE,UAAMC,QAAQ,GAAI,MAAMH,KAAK,CAACI,IAAN,CAAW,8BAAX,EAA0CC,IAA1C,EAA+C;AAACG,MAAAA,OAAO,EAAGN;AAAX,KAA/C,CAAxB;;AACA,QAAGC,QAAQ,CAACE,IAAZ,EACA;AACE,YAAMZ,GAAG,CAACG,iBAAiB,EAAlB,CAAT;AACD;AAEJ,GATD,CASC,OAAOU,KAAP,EAAc;AACb,QAAIA,KAAK,CAACH,QAAV,EAAoB;AAClB,YAAMV,GAAG,CAACI,eAAe,CAACS,KAAK,CAACH,QAAP,CAAhB,CAAT;AACD;AACF;AACJ,CAhBD;;AAiBA,MAAMM,WAAW,GACf,UAAUA,WAAV,CAAuB;AAACJ,EAAAA;AAAD,CAAvB,EAA+B;AAC7B,MAAI;AACH;AACC,UAAMG,OAAO,GAAG;AAAC,sBAAgB;AAAjB,KAAhB;AACE,UAAML,QAAQ,GAAI,MAAMH,KAAK,CAACI,IAAN,CAAW,oCAAX,EAAgDC,IAAhD,EAAqDG,OAArD,CAAxB;;AACA,QAAGL,QAAQ,CAACE,IAAZ,EACA;AACE,YAAMZ,GAAG,CAACM,gBAAgB,EAAjB,CAAT;AACD;AAEJ,GATD,CASC,OAAOO,KAAP,EAAc;AACb,QAAIA,KAAK,CAACH,QAAV,EAAoB;AAClB,YAAMV,GAAG,CAACK,cAAc,CAACQ,KAAK,CAACH,QAAP,CAAf,CAAT;AACD;AACF;AACJ,CAhBD;;AAiBA,eAAe,aAAa;AACxB,QAAMX,UAAU,CAAC,YAAD,EAAeS,WAAf,CAAhB;AACA,QAAMT,UAAU,CAAC,aAAD,EAAgBe,YAAhB,CAAhB;AACA,QAAMf,UAAU,CAAC,YAAD,EAAciB,WAAd,CAAhB;AACD","sourcesContent":["import { takeLatest, put } from \"redux-saga/effects\";\n//import { delay } from 'redux-saga/effects'\nimport {getImagesSuccess,getImagesError,sendImagesSuccess,sendImagesError,delImagesError,delImagesSuccess} from \"../actions/imagesAction\";\nimport axios from 'axios';\n\nconst getPictures =\n  function *getPictures ({user_id}) {\n    try {\n        const response  = yield axios.post('http://localhost:5000/getImages',{user_id : user_id});\n        if(response.data)\n        {\n            yield put(getImagesSuccess(response.data));\n        }\n       \n    }catch (error) {\n      if (error.response) {\n        yield put(getImagesError(error.response));\n      }\n    }\n};\nconst sendPictures =\n  function *sendPictures ({data,user_id}) {\n    try {\n     //console.log(data)\n      //const headers = {'Content-Type': 'multipart/form-data'};\n        const response  = yield axios.post('http://localhost:5000/upload',data,{headers : user_id});\n        if(response.data)\n        {\n          yield put(sendImagesSuccess());\n        }\n       \n    }catch (error) {\n      if (error.response) {\n        yield put(sendImagesError(error.response));\n      }\n    }\n};\nconst delPictures =\n  function *delPictures ({data}) {\n    try {\n     //console.log(data)\n      const headers = {'Content-Type': 'multipart/form-data'};\n        const response  = yield axios.post('http://localhost:5000/deleteImages',data,headers);\n        if(response.data)\n        {\n          yield put(delImagesSuccess());\n        }\n       \n    }catch (error) {\n      if (error.response) {\n        yield put(delImagesError(error.response));\n      }\n    }\n};\nexport default function *() {\n    yield takeLatest(\"GET_IMAGES\", getPictures);\n    yield takeLatest(\"SEND_IMAGES\", sendPictures);\n    yield takeLatest(\"DEL_IMAGES\",delPictures);\n  }"]},"metadata":{},"sourceType":"module"}