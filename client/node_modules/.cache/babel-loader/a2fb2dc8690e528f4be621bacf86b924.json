{"ast":null,"code":"import _defineProperty from \"/home/isifeddi/Desktop/Maatcha/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Register from '../../components/Register';\nimport { InscriptionAction } from '../../actions/registerAction';\nimport { connect } from \"react-redux\";\nimport { reduxForm } from 'redux-form';\n\nconst asyncValidate = (values, dispatch, props) => {\n  axios.post(\"http://localhost:5000/checkIfEx\", values.username).then(async () => {\n    const error = {};\n    const v = {\n      username: values.username,\n      email: values.email\n    };\n    const er = await axios.post('http://localhost:5000/checkIfEx', v);\n\n    if (er.data.username === 'Username already exists') {\n      error.username = er.data.username;\n    }\n\n    if (er.data.email === 'Email already exists') {\n      error.email = er.data.email;\n    }\n\n    if (error.username !== 'undefined' && error.email !== 'undefined') throw new SubmissionError({\n      username: error.username,\n      email: error.email\n    });\n  });\n};\n\nconst validate = values => {\n  const errors = {};\n  const requiredFields = ['firstname', 'lastname', 'username', 'email', 'password', 'confirmPassword'];\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  if (values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username)) errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) errors.email = \"Invalid email address !\";\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  return errors;\n};\n/*const submit =  (values) => {\n  console.log('submitted !!!!!!')\n};*/\n\n/*const RegisterContainer = ({handleSubmit}) => {\n    \n    return (\n       <Register\n            onSubmit ={submit}\n            handleSubmit = {handleSubmit}\n            renderField = {renderField}\n        />\n    )\n}\n*/\n\n\nconst mapStateToProps = state => ({\n  \"form\": state.form,\n  \"status\": state.register\n});\n\nconst mapDispatchToProps = {\n  \"registerAction\": InscriptionAction\n};\n\nconst mergeProps = (stateProps, dispatchProps, otherProps) => _objectSpread({}, stateProps, {}, dispatchProps, {}, otherProps, {\n  \"handleSubmit\": otherProps.handleSubmit(form => {\n    dispatchProps.registerAction(form);\n  })\n});\n\nconst connectedRegisterContainer = connect(mapStateToProps, mapDispatchToProps, mergeProps)(Register);\nconst RegisterContainer = reduxForm({\n  form: \"register\",\n  validate,\n  asyncValidate\n})(connectedRegisterContainer);\nexport default RegisterContainer;","map":{"version":3,"sources":["/home/isifeddi/Desktop/Maatcha/client/src/containers/Register/index.js"],"names":["React","Register","InscriptionAction","connect","reduxForm","asyncValidate","values","dispatch","props","axios","post","username","then","error","v","email","er","data","SubmissionError","validate","errors","requiredFields","forEach","field","trim","test","password","confirmPassword","mapStateToProps","state","form","register","mapDispatchToProps","mergeProps","stateProps","dispatchProps","otherProps","handleSubmit","registerAction","connectedRegisterContainer","RegisterContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Register from '../../components/Register';\nimport {InscriptionAction} from '../../actions/registerAction';\nimport {connect} from \"react-redux\";\nimport {reduxForm } from 'redux-form';\nconst asyncValidate = (values, dispatch, props) => {\n  axios.post(\"http://localhost:5000/checkIfEx\", values.username)\n\n.then(async () => {\n\n      const error = {}\n\n      const v = {username :values.username, email: values.email}\n\n      const er = await axios.post('http://localhost:5000/checkIfEx', v)\n\n      if (er.data.username === 'Username already exists')\n      {\n        error.username = er.data.username\n      }\n      if (er.data.email === 'Email already exists')\n      {\n        error.email= er.data.email\n      }\n      if(error.username !== 'undefined' && error.email !== 'undefined')\n        throw new SubmissionError ({\n          username: error.username,\n          email: error.email\n        })\n    })\n   \n  \n  } \nconst validate = (values) => {\nconst errors = {};\nconst requiredFields = [\n    'firstname',\n    'lastname',\n    'username',\n    'email',\n    'password',\n    'confirmPassword',\n];\n\nrequiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n        errors[field] = 'Required !';\n    }\n});\n\nif(values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username))\n    errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\nif (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email))\n    errors.email = \"Invalid email address !\";\nif(values.password && !/\\d/.test(values.password))\n    errors.password = \"Password must contain a number !\"\nelse if(values.password && !/[A-Z]/.test(values.password))\n    errors.password = \"Password must contain an uppercase letter !\"\nelse if(values.password && !/[a-z]/.test(values.password))\n    errors.password = \"Password must contain a lowercase letter !\"\nelse if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n    errors.password = \"Password must contain a special character !\"\nelse if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n    errors.password = \"Password must contain 8-20 characters !\"\nif(values.confirmPassword && values.password !== values.confirmPassword)\n    errors.confirmPassword = \"Passwords does not match !\"\nreturn errors;\n}\n\n/*const submit =  (values) => {\n  console.log('submitted !!!!!!')\n};*/\n\n/*const RegisterContainer = ({handleSubmit}) => {\n    \n    return (\n       <Register\n            onSubmit ={submit}\n            handleSubmit = {handleSubmit}\n            renderField = {renderField}\n        />\n    )\n}\n*/\n\nconst mapStateToProps = (state) => (\n{\n    \"form\" : state.form,\n    \"status\" : state.register\n});\n\nconst mapDispatchToProps = {\n    \"registerAction\": InscriptionAction\n};\nconst mergeProps = (stateProps, dispatchProps, otherProps)=> ({\n    ...stateProps,\n    ...dispatchProps,\n    ...otherProps,\n    \"handleSubmit\" : otherProps.handleSubmit((form)=>{\n        dispatchProps.registerAction(form);\n    })\n});\nconst connectedRegisterContainer = connect(mapStateToProps, mapDispatchToProps,mergeProps)(Register);\nconst RegisterContainer = reduxForm({\n    form : \"register\",\n    validate,\n    asyncValidate\n\n})(connectedRegisterContainer);\n\nexport default RegisterContainer;\n"]},"metadata":{},"sourceType":"module"}