{"ast":null,"code":"import axios from 'axios';\n\nconst validate = values => {\n  const errors = {};\n  const requiredFields = ['firstname', 'lastname', 'username', 'email', 'password', 'confirmPassword'];\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  var u = 10;\n  var e = 10;\n  axios.post('http://localhost:5000/register', values).then(function (response) {\n    // if(response.data.username === 'username already exists')\n    //     u = 1;\n    // else\n    //     u = 0;\n    // if(response.data.email === 'email already exists')\n    //     e = 1;\n    // else\n    //     e = 0;\n    console.log(\"response=\" + response.data.username + \"  e=\" + e + \"   u=\" + u);\n  });\n  console.log(\"after\" + e + u);\n  if (values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username)) errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n  if (values.username && u === 1) errors.username = \"username already exists\";\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) errors.email = \"Invalid email address !\";\n  if (values.email && e === 1) errors.email = \"email already exists\";\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  return errors;\n};\n\nexport default validate;","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/containers/Register/validate.js"],"names":["axios","validate","values","errors","requiredFields","forEach","field","trim","u","e","post","then","response","console","log","data","username","test","email","password","confirmPassword"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AACzB,QAAMC,MAAM,GAAG,EAAf;AAEA,QAAMC,cAAc,GAAG,CACnB,WADmB,EAEnB,UAFmB,EAGnB,UAHmB,EAInB,OAJmB,EAKnB,UALmB,EAMnB,iBANmB,CAAvB;AASAA,EAAAA,cAAc,CAACC,OAAf,CAAuBC,KAAK,IAAI;AAC5B,QAAI,CAACJ,MAAM,CAACI,KAAD,CAAP,IAAkB,CAACJ,MAAM,CAACI,KAAD,CAAN,CAAcC,IAAd,EAAvB,EAA6C;AACzCJ,MAAAA,MAAM,CAACG,KAAD,CAAN,GAAgB,YAAhB;AACH;AACJ,GAJD;AAMA,MAAIE,CAAC,GAAG,EAAR;AACA,MAAIC,CAAC,GAAG,EAAR;AACAT,EAAAA,KAAK,CAACU,IAAN,CAAW,gCAAX,EAA6CR,MAA7C,EAAqDS,IAArD,CAA0D,UAASC,QAAT,EAAkB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAYF,QAAQ,CAACG,IAAT,CAAcC,QAA1B,GAAoC,MAApC,GAA4CP,CAA5C,GAAgD,OAAhD,GAAwDD,CAApE;AACH,GAVD;AAYAK,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAQL,CAAR,GAAUD,CAAtB;AAEA,MAAGN,MAAM,CAACc,QAAP,IAAmB,CAAC,qBAAqBC,IAArB,CAA0Bf,MAAM,CAACc,QAAjC,CAAvB,EACIb,MAAM,CAACa,QAAP,GAAkB,2EAAlB;AACJ,MAAGd,MAAM,CAACc,QAAP,IAAmBR,CAAC,KAAK,CAA5B,EACIL,MAAM,CAACa,QAAP,GAAkB,yBAAlB;AACJ,MAAId,MAAM,CAACgB,KAAP,IAAgB,CAAC,4CAA4CD,IAA5C,CAAiDf,MAAM,CAACgB,KAAxD,CAArB,EACIf,MAAM,CAACe,KAAP,GAAe,yBAAf;AACJ,MAAGhB,MAAM,CAACgB,KAAP,IAAgBT,CAAC,KAAK,CAAzB,EACIN,MAAM,CAACe,KAAP,GAAe,sBAAf;AACJ,MAAGhB,MAAM,CAACiB,QAAP,IAAmB,CAAC,KAAKF,IAAL,CAAUf,MAAM,CAACiB,QAAjB,CAAvB,EACIhB,MAAM,CAACgB,QAAP,GAAkB,kCAAlB,CADJ,KAEK,IAAGjB,MAAM,CAACiB,QAAP,IAAmB,CAAC,QAAQF,IAAR,CAAaf,MAAM,CAACiB,QAApB,CAAvB,EACDhB,MAAM,CAACgB,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGjB,MAAM,CAACiB,QAAP,IAAmB,CAAC,QAAQF,IAAR,CAAaf,MAAM,CAACiB,QAApB,CAAvB,EACDhB,MAAM,CAACgB,QAAP,GAAkB,4CAAlB,CADC,KAEA,IAAGjB,MAAM,CAACiB,QAAP,IAAmB,CAAC,uCAAuCF,IAAvC,CAA4Cf,MAAM,CAACiB,QAAnD,CAAvB,EACDhB,MAAM,CAACgB,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGjB,MAAM,CAACiB,QAAP,IAAmB,CAAC,uDAAuDF,IAAvD,CAA4Df,MAAM,CAACiB,QAAnE,CAAvB,EACDhB,MAAM,CAACgB,QAAP,GAAkB,yCAAlB;AACJ,MAAGjB,MAAM,CAACkB,eAAP,IAA0BlB,MAAM,CAACiB,QAAP,KAAoBjB,MAAM,CAACkB,eAAxD,EACIjB,MAAM,CAACiB,eAAP,GAAyB,4BAAzB;AAEJ,SAAOjB,MAAP;AACH,CAxDD;;AA0DA,eAAeF,QAAf","sourcesContent":["import axios from 'axios';\n\nconst validate = (values) => {\n    const errors = {};\n\n    const requiredFields = [\n        'firstname',\n        'lastname',\n        'username',\n        'email',\n        'password',\n        'confirmPassword',\n    ];\n\n    requiredFields.forEach(field => {\n        if (!values[field] || !values[field].trim()) {\n            errors[field] = 'Required !';\n        }\n    });\n\n    var u = 10;\n    var e = 10;\n    axios.post('http://localhost:5000/register', values).then(function(response){\n        // if(response.data.username === 'username already exists')\n        //     u = 1;\n        // else\n        //     u = 0;\n        // if(response.data.email === 'email already exists')\n        //     e = 1;\n        // else\n        //     e = 0;\n        console.log(\"response=\"+response.data.username +\"  e=\"+ e + \"   u=\"+u)\n    });\n\n    console.log(\"after\"+e+u)\n\n    if(values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username))\n        errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n    if(values.username && u === 1)\n        errors.username = \"username already exists\"\n    if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email))\n        errors.email = \"Invalid email address !\";\n    if(values.email && e === 1)\n        errors.email = \"email already exists\"\n    if(values.password && !/\\d/.test(values.password))\n        errors.password = \"Password must contain a number !\"\n    else if(values.password && !/[A-Z]/.test(values.password))\n        errors.password = \"Password must contain an uppercase letter !\"\n    else if(values.password && !/[a-z]/.test(values.password))\n        errors.password = \"Password must contain a lowercase letter !\"\n    else if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n        errors.password = \"Password must contain a special character !\"\n    else if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n        errors.password = \"Password must contain 8-20 characters !\"\n    if(values.confirmPassword && values.password !== values.confirmPassword)\n        errors.confirmPassword = \"Passwords does not match !\"\n  \n    return errors;\n}\n\nexport default validate;"]},"metadata":{},"sourceType":"module"}