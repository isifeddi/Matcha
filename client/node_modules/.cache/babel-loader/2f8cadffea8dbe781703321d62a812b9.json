{"ast":null,"code":"import _defineProperty from \"/Users/isifeddi/Desktop/Matcha/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeLatest, put } from \"redux-saga/effects\";\nimport { getOptionsSuccess, createOptionSuccess, createOptionError, addInfoSuccess, addInfoError, getUserDataSuccess, getUserDataError } from \"../actions/addInfoAction\";\nimport { decodeTokenSuccess } from '../actions/decodeAction';\nimport { select } from 'redux-saga/effects';\nimport axios from 'axios';\n\nconst getSelectOptions = function* getSelectOptions() {\n  try {\n    const response = yield axios.post('http://localhost:5000/getOptions');\n\n    if (response.data) {\n      yield put(getOptionsSuccess(response.data));\n    } else {\n      yield put(getOptionsSuccess());\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(getOptionsSuccess());\n    }\n  }\n};\n\nconst createSelectOption = function* createSelectOption(act) {\n  try {\n    const id = yield select(state => state.user.id);\n    const option = act.data.value;\n    const response = yield axios.post('http://localhost:5000/createOption', {\n      option: option,\n      id: id\n    });\n\n    if (response.data.created) {\n      yield put(createOptionSuccess(response.data.option));\n    } else {\n      yield put(createOptionError(response.data.error));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(createOptionError('there has been an error'));\n    }\n  }\n};\n\nconst add_Info = function* add_Info({\n  data,\n  id\n}) {\n  try {\n    const info = _objectSpread({}, data, {\n      id\n    });\n\n    const inter = data.interests.map(item => item.value);\n    info.interests = inter;\n    const response = yield axios.post('http://localhost:5000/addInfo', info);\n\n    if (response.data.added) {\n      yield put(addInfoSuccess());\n    } else {\n      yield put(addInfoError(response.data.error));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(createOptionError('there has been an error'));\n    }\n  }\n};\n\nconst getData = function* getData({\n  id\n}) {\n  try {\n    const response = yield axios.post('http://localhost:5000/getUserData', {\n      id: id\n    });\n\n    if (response.data.res) {\n      yield put(getUserDataSuccess(response.data.userData));\n    } else {\n      yield put(getUserDataError('Error'));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(getUserDataError('there has been an error'));\n    }\n  }\n};\n\nexport default function* () {\n  yield takeLatest(\"GET_USER_DATA\", getData);\n  yield takeLatest(\"GET_OPTIONS\", getSelectOptions);\n  yield takeLatest(\"CREATE_OPTION\", createSelectOption);\n  yield takeLatest(\"ADD_INFO\", add_Info);\n}","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/sagas/addInfoSaga.js"],"names":["takeLatest","put","getOptionsSuccess","createOptionSuccess","createOptionError","addInfoSuccess","addInfoError","getUserDataSuccess","getUserDataError","decodeTokenSuccess","select","axios","getSelectOptions","response","post","data","error","createSelectOption","act","id","state","user","option","value","created","add_Info","info","inter","interests","map","item","added","getData","res","userData"],"mappings":"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","sourcesContent":["import { takeLatest, put } from \"redux-saga/effects\";\nimport { getOptionsSuccess, createOptionSuccess, createOptionError, addInfoSuccess, addInfoError, getUserDataSuccess, getUserDataError} from \"../actions/addInfoAction\";\nimport { decodeTokenSuccess} from '../actions/decodeAction'\nimport { select } from 'redux-saga/effects'; \nimport axios from 'axios';\n\nconst getSelectOptions =\n  function *getSelectOptions () {\n    try {\n        const response  = yield axios.post('http://localhost:5000/getOptions');\n        if(response.data)\n        {\n            yield put(getOptionsSuccess(response.data));\n        }\n        else\n        {\n            yield put(getOptionsSuccess());\n        }\n    }catch (error) {\n      if (error.response) {\n        yield put(getOptionsSuccess());\n      }\n    }\n};\n\nconst createSelectOption =\n  function *createSelectOption (act) {\n    try {\n        const id = yield select((state) => state.user.id);\n        const option = act.data.value;\n        const response  = yield axios.post('http://localhost:5000/createOption', {option: option, id: id});\n        if(response.data.created)\n        {\n          yield put(createOptionSuccess(response.data.option));\n        }\n        else\n        {\n          yield put(createOptionError(response.data.error));\n        }\n    }catch (error) {\n      if (error.response) {\n        yield put(createOptionError('there has been an error'));\n      }\n    }\n};\n\nconst add_Info =\n  function *add_Info ({data, id}) {\n    try {\n      const info = {...data, id}\n      const inter = data.interests.map(item => item.value)\n      info.interests = inter;\n      const response  = yield axios.post('http://localhost:5000/addInfo', info);\n      if(response.data.added)\n      {\n        yield put(addInfoSuccess());\n      }\n      else\n      {\n        yield put(addInfoError(response.data.error));\n      }\n    }catch (error) {\n      if (error.response) {\n        yield put(createOptionError('there has been an error'));\n      }\n    }\n};\n\nconst getData =\n  function *getData ({id}) {\n    try {\n      const response  = yield axios.post('http://localhost:5000/getUserData', {id: id});\n      if(response.data.res)\n      {\n        yield put(getUserDataSuccess(response.data.userData));\n      }\n      else\n      {\n        yield put(getUserDataError('Error'));\n      }\n    }catch (error) {\n      if (error.response) {\n        yield put(getUserDataError('there has been an error'));\n      }\n    }\n};\n\nexport default function *() {\n  yield takeLatest(\"GET_USER_DATA\", getData);\n  yield takeLatest(\"GET_OPTIONS\", getSelectOptions);\n  yield takeLatest(\"CREATE_OPTION\", createSelectOption);\n  yield takeLatest(\"ADD_INFO\", add_Info);\n}"]},"metadata":{},"sourceType":"module"}