{"ast":null,"code":"import _defineProperty from \"/Users/isifeddi/Desktop/Matcha/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeLatest, put } from \"redux-saga/effects\";\nimport { getOptionsSuccess, createOptionSuccess, createOptionError, addInfoSuccess, addInfoError } from \"../actions/addInfoAction\";\nimport axios from 'axios';\n\nconst getSelectOptions = function* getSelectOptions() {\n  try {\n    const response = yield axios.post('http://localhost:5000/getOptions');\n\n    if (response.data) {\n      yield put(getOptionsSuccess(response.data));\n    } else {\n      yield put(getOptionsSuccess());\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(getOptionsSuccess());\n    }\n  }\n};\n\nconst createSelectOption = function* createSelectOption(act) {\n  try {\n    const option = act.data.value;\n    const response = yield axios.post('http://localhost:5000/createOption', {\n      option: option\n    });\n\n    if (response.data.created) {\n      yield put(createOptionSuccess(response.data.option));\n    } else {\n      yield put(createOptionError(response.data.error));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(createOptionError('there has been an error'));\n    }\n  }\n};\n\nconst add_Info = function* add_Info({\n  data\n}) {\n  try {\n    const info = _objectSpread({\n      gender,\n      sexOrient\n    }, data);\n\n    const inter = data.interests.map(item => item.value);\n    console.log(inter);\n    const response = yield axios.post('http://localhost:5000/addInfo', data);\n\n    if (response.data.added) {\n      yield put(addInfoSuccess());\n    } else {\n      yield put(addInfoError(response.data.error));\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(createOptionError('there has been an error'));\n    }\n  }\n};\n\nexport default function* () {\n  yield takeLatest(\"GET_OPTIONS\", getSelectOptions);\n  yield takeLatest(\"CREATE_OPTION\", createSelectOption);\n  yield takeLatest(\"ADD_INFO\", add_Info);\n}","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/sagas/addInfoSaga.js"],"names":["takeLatest","put","getOptionsSuccess","createOptionSuccess","createOptionError","addInfoSuccess","addInfoError","axios","getSelectOptions","response","post","data","error","createSelectOption","act","option","value","created","add_Info","info","gender","sexOrient","inter","interests","map","item","console","log","added"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,EAAiDC,iBAAjD,EAAoEC,cAApE,EAAoFC,YAApF,QAAuG,0BAAvG;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,gBAAgB,GACpB,UAAUA,gBAAV,GAA8B;AAC5B,MAAI;AACA,UAAMC,QAAQ,GAAI,MAAMF,KAAK,CAACG,IAAN,CAAW,kCAAX,CAAxB;;AACA,QAAGD,QAAQ,CAACE,IAAZ,EACA;AACI,YAAMV,GAAG,CAACC,iBAAiB,CAACO,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACH,KAHD,MAKA;AACI,YAAMV,GAAG,CAACC,iBAAiB,EAAlB,CAAT;AACH;AACJ,GAVD,CAUC,OAAOU,KAAP,EAAc;AACb,QAAIA,KAAK,CAACH,QAAV,EAAoB;AAClB,YAAMR,GAAG,CAACC,iBAAiB,EAAlB,CAAT;AACD;AACF;AACJ,CAjBD;;AAmBA,MAAMW,kBAAkB,GACtB,UAAUA,kBAAV,CAA8BC,GAA9B,EAAmC;AACjC,MAAI;AACA,UAAMC,MAAM,GAAGD,GAAG,CAACH,IAAJ,CAASK,KAAxB;AACA,UAAMP,QAAQ,GAAI,MAAMF,KAAK,CAACG,IAAN,CAAW,oCAAX,EAAiD;AAACK,MAAAA,MAAM,EAAEA;AAAT,KAAjD,CAAxB;;AACA,QAAGN,QAAQ,CAACE,IAAT,CAAcM,OAAjB,EACA;AACE,YAAMhB,GAAG,CAACE,mBAAmB,CAACM,QAAQ,CAACE,IAAT,CAAcI,MAAf,CAApB,CAAT;AACD,KAHD,MAKA;AACE,YAAMd,GAAG,CAACG,iBAAiB,CAACK,QAAQ,CAACE,IAAT,CAAcC,KAAf,CAAlB,CAAT;AACD;AACJ,GAXD,CAWC,OAAOA,KAAP,EAAc;AACb,QAAIA,KAAK,CAACH,QAAV,EAAoB;AAClB,YAAMR,GAAG,CAACG,iBAAiB,CAAC,yBAAD,CAAlB,CAAT;AACD;AACF;AACJ,CAlBD;;AAoBA,MAAMc,QAAQ,GACZ,UAAUA,QAAV,CAAoB;AAACP,EAAAA;AAAD,CAApB,EAA4B;AAC1B,MAAI;AACF,UAAMQ,IAAI;AAAIC,MAAAA,MAAJ;AAAYC,MAAAA;AAAZ,OAA0BV,IAA1B,CAAV;;AACA,UAAMW,KAAK,GAAGX,IAAI,CAACY,SAAL,CAAeC,GAAf,CAAmBC,IAAI,IAAIA,IAAI,CAACT,KAAhC,CAAd;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,UAAMb,QAAQ,GAAI,MAAMF,KAAK,CAACG,IAAN,CAAW,+BAAX,EAA4CC,IAA5C,CAAxB;;AACA,QAAGF,QAAQ,CAACE,IAAT,CAAciB,KAAjB,EACA;AACE,YAAM3B,GAAG,CAACI,cAAc,EAAf,CAAT;AACD,KAHD,MAKA;AACE,YAAMJ,GAAG,CAACK,YAAY,CAACG,QAAQ,CAACE,IAAT,CAAcC,KAAf,CAAb,CAAT;AACD;AACF,GAbD,CAaC,OAAOA,KAAP,EAAc;AACb,QAAIA,KAAK,CAACH,QAAV,EAAoB;AAClB,YAAMR,GAAG,CAACG,iBAAiB,CAAC,yBAAD,CAAlB,CAAT;AACD;AACF;AACJ,CApBD;;AAsBA,eAAe,aAAa;AAC1B,QAAMJ,UAAU,CAAC,aAAD,EAAgBQ,gBAAhB,CAAhB;AACA,QAAMR,UAAU,CAAC,eAAD,EAAkBa,kBAAlB,CAAhB;AACA,QAAMb,UAAU,CAAC,UAAD,EAAakB,QAAb,CAAhB;AACD","sourcesContent":["import { takeLatest, put } from \"redux-saga/effects\";\nimport { getOptionsSuccess, createOptionSuccess, createOptionError, addInfoSuccess, addInfoError} from \"../actions/addInfoAction\";\nimport axios from 'axios';\n\nconst getSelectOptions =\n  function *getSelectOptions () {\n    try {\n        const response  = yield axios.post('http://localhost:5000/getOptions');\n        if(response.data)\n        {\n            yield put(getOptionsSuccess(response.data));\n        }\n        else\n        {\n            yield put(getOptionsSuccess());\n        }\n    }catch (error) {\n      if (error.response) {\n        yield put(getOptionsSuccess());\n      }\n    }\n};\n\nconst createSelectOption =\n  function *createSelectOption (act) {\n    try {\n        const option = act.data.value;\n        const response  = yield axios.post('http://localhost:5000/createOption', {option: option});\n        if(response.data.created)\n        {\n          yield put(createOptionSuccess(response.data.option));\n        }\n        else\n        {\n          yield put(createOptionError(response.data.error));\n        }\n    }catch (error) {\n      if (error.response) {\n        yield put(createOptionError('there has been an error'));\n      }\n    }\n};\n\nconst add_Info =\n  function *add_Info ({data}) {\n    try {\n      const info = {gender, sexOrient, ...data}\n      const inter = data.interests.map(item => item.value)\n      console.log(inter);\n      const response  = yield axios.post('http://localhost:5000/addInfo', data);\n      if(response.data.added)\n      {\n        yield put(addInfoSuccess());\n      }\n      else\n      {\n        yield put(addInfoError(response.data.error));\n      }\n    }catch (error) {\n      if (error.response) {\n        yield put(createOptionError('there has been an error'));\n      }\n    }\n};\n\nexport default function *() {\n  yield takeLatest(\"GET_OPTIONS\", getSelectOptions);\n  yield takeLatest(\"CREATE_OPTION\", createSelectOption);\n  yield takeLatest(\"ADD_INFO\", add_Info)\n}"]},"metadata":{},"sourceType":"module"}