{"ast":null,"code":"import axios from 'axios';\n\nconst validate = values => {\n  const errors = {};\n  const requiredFields = ['firstname', 'lastname', 'username', 'email', 'password', 'confirmPassword'];\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  if (values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username)) errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address !\";\n  }\n\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  axios.post('http://localhost:5000/register', values).then(function (response) {\n    if (response.data.username === \"username already exists\") errors.username = \"username already exists\";\n    if (response.data.email === \"email already exists\") errors.email = \"email already exists\";\n    console.log(\"r=\" + response.data.username + \"  e=\" + errors.username);\n  });\n  return errors;\n};\n\nexport default validate;","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/containers/Register/validate.js"],"names":["axios","validate","values","errors","requiredFields","forEach","field","trim","username","test","email","password","confirmPassword","post","then","response","data","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AACzB,QAAMC,MAAM,GAAG,EAAf;AAEA,QAAMC,cAAc,GAAG,CACnB,WADmB,EAEnB,UAFmB,EAGnB,UAHmB,EAInB,OAJmB,EAKnB,UALmB,EAMnB,iBANmB,CAAvB;AAQAA,EAAAA,cAAc,CAACC,OAAf,CAAuBC,KAAK,IAAI;AAC5B,QAAI,CAACJ,MAAM,CAACI,KAAD,CAAP,IAAkB,CAACJ,MAAM,CAACI,KAAD,CAAN,CAAcC,IAAd,EAAvB,EAA6C;AACzCJ,MAAAA,MAAM,CAACG,KAAD,CAAN,GAAgB,YAAhB;AACH;AACJ,GAJD;AAMI,MAAGJ,MAAM,CAACM,QAAP,IAAmB,CAAC,qBAAqBC,IAArB,CAA0BP,MAAM,CAACM,QAAjC,CAAvB,EACIL,MAAM,CAACK,QAAP,GAAkB,2EAAlB;;AACJ,MAAIN,MAAM,CAACQ,KAAP,IAAgB,CAAC,4CAA4CD,IAA5C,CAAiDP,MAAM,CAACQ,KAAxD,CAArB,EAAqF;AACjFP,IAAAA,MAAM,CAACO,KAAP,GAAe,yBAAf;AACH;;AACD,MAAGR,MAAM,CAACS,QAAP,IAAmB,CAAC,KAAKF,IAAL,CAAUP,MAAM,CAACS,QAAjB,CAAvB,EACER,MAAM,CAACQ,QAAP,GAAkB,kCAAlB,CADF,KAEK,IAAGT,MAAM,CAACS,QAAP,IAAmB,CAAC,QAAQF,IAAR,CAAaP,MAAM,CAACS,QAApB,CAAvB,EACDR,MAAM,CAACQ,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGT,MAAM,CAACS,QAAP,IAAmB,CAAC,QAAQF,IAAR,CAAaP,MAAM,CAACS,QAApB,CAAvB,EACDR,MAAM,CAACQ,QAAP,GAAkB,4CAAlB,CADC,KAEA,IAAGT,MAAM,CAACS,QAAP,IAAmB,CAAC,uCAAuCF,IAAvC,CAA4CP,MAAM,CAACS,QAAnD,CAAvB,EACDR,MAAM,CAACQ,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGT,MAAM,CAACS,QAAP,IAAmB,CAAC,uDAAuDF,IAAvD,CAA4DP,MAAM,CAACS,QAAnE,CAAvB,EACDR,MAAM,CAACQ,QAAP,GAAkB,yCAAlB;AACJ,MAAGT,MAAM,CAACU,eAAP,IAA0BV,MAAM,CAACS,QAAP,KAAoBT,MAAM,CAACU,eAAxD,EACIT,MAAM,CAACS,eAAP,GAAyB,4BAAzB;AAGJZ,EAAAA,KAAK,CAACa,IAAN,CAAW,gCAAX,EAA6CX,MAA7C,EAAqDY,IAArD,CAA0D,UAASC,QAAT,EAAkB;AACxE,QAAGA,QAAQ,CAACC,IAAT,CAAcR,QAAd,KAA2B,yBAA9B,EACIL,MAAM,CAACK,QAAP,GAAkB,yBAAlB;AACJ,QAAGO,QAAQ,CAACC,IAAT,CAAcN,KAAd,KAAwB,sBAA3B,EACIP,MAAM,CAACO,KAAP,GAAe,sBAAf;AACJO,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAKH,QAAQ,CAACC,IAAT,CAAcR,QAAnB,GAA4B,MAA5B,GAAoCL,MAAM,CAACK,QAAvD;AACH,GAND;AAQA,SAAOL,MAAP;AACP,CA7CD;;AA+CA,eAAeF,QAAf","sourcesContent":["import axios from 'axios';\n\nconst validate = (values) => {\n    const errors = {};\n\n    const requiredFields = [\n        'firstname',\n        'lastname',\n        'username',\n        'email',\n        'password',\n        'confirmPassword',\n    ];\n    requiredFields.forEach(field => {\n        if (!values[field] || !values[field].trim()) {\n            errors[field] = 'Required !';\n        }\n    });\n\n        if(values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username))\n            errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n        if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n            errors.email = \"Invalid email address !\";\n        }\n        if(values.password && !/\\d/.test(values.password))\n          errors.password = \"Password must contain a number !\"\n        else if(values.password && !/[A-Z]/.test(values.password))\n            errors.password = \"Password must contain an uppercase letter !\"\n        else if(values.password && !/[a-z]/.test(values.password))\n            errors.password = \"Password must contain a lowercase letter !\"\n        else if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n            errors.password = \"Password must contain a special character !\"\n        else if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n            errors.password = \"Password must contain 8-20 characters !\"\n        if(values.confirmPassword && values.password !== values.confirmPassword)\n            errors.confirmPassword = \"Passwords does not match !\"\n\n\n        axios.post('http://localhost:5000/register', values).then(function(response){\n            if(response.data.username === \"username already exists\")\n                errors.username = \"username already exists\"\n            if(response.data.email === \"email already exists\")\n                errors.email = \"email already exists\"\n            console.log(\"r=\"+response.data.username+\"  e=\"+ errors.username)\n        });\n        \n        return errors;\n}\n\nexport default validate;"]},"metadata":{},"sourceType":"module"}