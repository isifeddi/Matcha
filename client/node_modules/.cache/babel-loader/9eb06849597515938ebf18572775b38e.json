{"ast":null,"code":"import axios from 'axios';\n\nconst validate = values => {\n  const errors = {};\n  const requiredFields = ['firstname', 'lastname', 'username', 'email', 'password', 'confirmPassword'];\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  let u = 0;\n  let e = 0;\n\n  function getv() {\n    return axios.post('http://localhost:5000/register', values).then(function (response) {\n      // if(response.data.username === 'username already exists')\n      //     u = 1;\n      // else\n      //     u = 0;\n      // if(response.data.email === 'email already exists')\n      //     e = 1;\n      // else\n      //     e = 0;\n      // return [u, e];\n      return [response.data.username, response.data.email];\n    });\n  }\n\n  getv().then(function (r) {\n    if (r.username === 'username already exists') u = 1;\n    if (r.email === 'email already exists') e = 1;\n  });\n  if (values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username)) errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n  if (values.username && u === 1) errors.username = \"username already exists\";\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) errors.email = \"Invalid email address !\";\n  if (values.email && e === 1) errors.email = \"email already exists\";\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  return errors;\n};\n\nexport default validate;","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/containers/Register/validate.js"],"names":["axios","validate","values","errors","requiredFields","forEach","field","trim","u","e","getv","post","then","response","data","username","email","r","test","password","confirmPassword"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AACzB,QAAMC,MAAM,GAAG,EAAf;AAEA,QAAMC,cAAc,GAAG,CACnB,WADmB,EAEnB,UAFmB,EAGnB,UAHmB,EAInB,OAJmB,EAKnB,UALmB,EAMnB,iBANmB,CAAvB;AASAA,EAAAA,cAAc,CAACC,OAAf,CAAuBC,KAAK,IAAI;AAC5B,QAAI,CAACJ,MAAM,CAACI,KAAD,CAAP,IAAkB,CAACJ,MAAM,CAACI,KAAD,CAAN,CAAcC,IAAd,EAAvB,EAA6C;AACzCJ,MAAAA,MAAM,CAACG,KAAD,CAAN,GAAgB,YAAhB;AACH;AACJ,GAJD;AAMA,MAAIE,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,WAASC,IAAT,GAAiB;AACb,WAAQV,KAAK,CAACW,IAAN,CAAW,gCAAX,EAA6CT,MAA7C,EACCU,IADD,CACM,UAAUC,QAAV,EAAmB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,CAACA,QAAQ,CAACC,IAAT,CAAcC,QAAf,EAAyBF,QAAQ,CAACC,IAAT,CAAcE,KAAvC,CAAP;AACH,KAZD,CAAR;AAaH;;AAEDN,EAAAA,IAAI,GAAGE,IAAP,CAAY,UAAUK,CAAV,EAAa;AACrB,QAAGA,CAAC,CAACF,QAAF,KAAe,yBAAlB,EACIP,CAAC,GAAG,CAAJ;AACJ,QAAGS,CAAC,CAACD,KAAF,KAAY,sBAAf,EACIP,CAAC,GAAG,CAAJ;AACP,GALD;AAOA,MAAGP,MAAM,CAACa,QAAP,IAAmB,CAAC,qBAAqBG,IAArB,CAA0BhB,MAAM,CAACa,QAAjC,CAAvB,EACIZ,MAAM,CAACY,QAAP,GAAkB,2EAAlB;AACJ,MAAGb,MAAM,CAACa,QAAP,IAAmBP,CAAC,KAAK,CAA5B,EACIL,MAAM,CAACY,QAAP,GAAkB,yBAAlB;AACJ,MAAIb,MAAM,CAACc,KAAP,IAAgB,CAAC,4CAA4CE,IAA5C,CAAiDhB,MAAM,CAACc,KAAxD,CAArB,EACIb,MAAM,CAACa,KAAP,GAAe,yBAAf;AACJ,MAAGd,MAAM,CAACc,KAAP,IAAgBP,CAAC,KAAK,CAAzB,EACIN,MAAM,CAACa,KAAP,GAAe,sBAAf;AACJ,MAAGd,MAAM,CAACiB,QAAP,IAAmB,CAAC,KAAKD,IAAL,CAAUhB,MAAM,CAACiB,QAAjB,CAAvB,EACIhB,MAAM,CAACgB,QAAP,GAAkB,kCAAlB,CADJ,KAEK,IAAGjB,MAAM,CAACiB,QAAP,IAAmB,CAAC,QAAQD,IAAR,CAAahB,MAAM,CAACiB,QAApB,CAAvB,EACDhB,MAAM,CAACgB,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGjB,MAAM,CAACiB,QAAP,IAAmB,CAAC,QAAQD,IAAR,CAAahB,MAAM,CAACiB,QAApB,CAAvB,EACDhB,MAAM,CAACgB,QAAP,GAAkB,4CAAlB,CADC,KAEA,IAAGjB,MAAM,CAACiB,QAAP,IAAmB,CAAC,uCAAuCD,IAAvC,CAA4ChB,MAAM,CAACiB,QAAnD,CAAvB,EACDhB,MAAM,CAACgB,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGjB,MAAM,CAACiB,QAAP,IAAmB,CAAC,uDAAuDD,IAAvD,CAA4DhB,MAAM,CAACiB,QAAnE,CAAvB,EACDhB,MAAM,CAACgB,QAAP,GAAkB,yCAAlB;AACJ,MAAGjB,MAAM,CAACkB,eAAP,IAA0BlB,MAAM,CAACiB,QAAP,KAAoBjB,MAAM,CAACkB,eAAxD,EACIjB,MAAM,CAACiB,eAAP,GAAyB,4BAAzB;AAEJ,SAAOjB,MAAP;AACH,CAlED;;AAoEA,eAAeF,QAAf","sourcesContent":["import axios from 'axios';\n\nconst validate = (values) => {\n    const errors = {};\n\n    const requiredFields = [\n        'firstname',\n        'lastname',\n        'username',\n        'email',\n        'password',\n        'confirmPassword',\n    ];\n\n    requiredFields.forEach(field => {\n        if (!values[field] || !values[field].trim()) {\n            errors[field] = 'Required !';\n        }\n    });\n\n    let u = 0;\n    let e = 0;\n    \n    function getv () {\n        return  axios.post('http://localhost:5000/register', values)\n                .then(function (response){\n                    // if(response.data.username === 'username already exists')\n                    //     u = 1;\n                    // else\n                    //     u = 0;\n                    // if(response.data.email === 'email already exists')\n                    //     e = 1;\n                    // else\n                    //     e = 0;\n                    // return [u, e];\n                    return [response.data.username, response.data.email];\n                });\n    }\n\n    getv().then(function (r) {\n        if(r.username === 'username already exists')\n            u = 1;\n        if(r.email === 'email already exists')\n            e = 1;\n    })\n\n    if(values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username))\n        errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n    if(values.username && u === 1)\n        errors.username = \"username already exists\"\n    if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email))\n        errors.email = \"Invalid email address !\";\n    if(values.email && e === 1)\n        errors.email = \"email already exists\"\n    if(values.password && !/\\d/.test(values.password))\n        errors.password = \"Password must contain a number !\"\n    else if(values.password && !/[A-Z]/.test(values.password))\n        errors.password = \"Password must contain an uppercase letter !\"\n    else if(values.password && !/[a-z]/.test(values.password))\n        errors.password = \"Password must contain a lowercase letter !\"\n    else if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n        errors.password = \"Password must contain a special character !\"\n    else if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n        errors.password = \"Password must contain 8-20 characters !\"\n    if(values.confirmPassword && values.password !== values.confirmPassword)\n        errors.confirmPassword = \"Passwords does not match !\"\n  \n    return errors;\n}\n\nexport default validate;"]},"metadata":{},"sourceType":"module"}