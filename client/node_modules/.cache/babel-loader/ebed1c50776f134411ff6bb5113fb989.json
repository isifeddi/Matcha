{"ast":null,"code":"import _objectSpread from \"/Volumes/Storage/goinfre/isifeddi/Matcha/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport Register from '../../components/Register';\nimport { InscriptionAction } from '../../actions/registerAction';\nimport { connect } from \"react-redux\";\nimport { reduxForm } from 'redux-form';\n\nconst validate = values => {\n  const errors = {};\n  const requiredFields = ['firstname', 'lastname', 'username', 'email', 'password', 'confirmPassword'];\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  if (values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username)) errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) errors.email = \"Invalid email address !\";\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  return errors;\n};\n\nconst mapStateToProps = state => ({\n  \"form\": state.form,\n  \"status\": state.register.registerStatus,\n  \"err\": state.register.error\n});\n\nconst mapDispatchToProps = {\n  \"registerAction\": InscriptionAction\n};\n\nconst mergeProps = (stateProps, dispatchProps, otherProps) => _objectSpread({}, stateProps, {}, dispatchProps, {}, otherProps, {\n  \"handleSubmit\": otherProps.handleSubmit(form => {\n    dispatchProps.registerAction(form);\n  })\n});\n\nconst connectedRegisterContainer = connect(mapStateToProps, mapDispatchToProps, mergeProps)(Register);\nconst RegisterContainer = reduxForm({\n  form: \"register\",\n  \"destroyOnUnmount\": true,\n  validate\n})(connectedRegisterContainer);\nexport default RegisterContainer;","map":{"version":3,"sources":["/Volumes/Storage/goinfre/isifeddi/Matcha/client/src/containers/Register/index.js"],"names":["Register","InscriptionAction","connect","reduxForm","validate","values","errors","requiredFields","forEach","field","trim","username","test","email","password","confirmPassword","mapStateToProps","state","form","register","registerStatus","error","mapDispatchToProps","mergeProps","stateProps","dispatchProps","otherProps","handleSubmit","registerAction","connectedRegisterContainer","RegisterContainer"],"mappings":"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","sourcesContent":["import Register from '../../components/Register';\nimport {InscriptionAction} from '../../actions/registerAction';\nimport {connect} from \"react-redux\";\nimport {reduxForm } from 'redux-form';\n\nconst validate = (values) => {\n    const errors = {};\n    const requiredFields = [\n        'firstname',\n        'lastname',\n        'username',\n        'email',\n        'password',\n        'confirmPassword',\n    ];\n\n    requiredFields.forEach(field => {\n        if (!values[field] || !values[field].trim()) {\n            errors[field] = 'Required !';\n        }\n    });\n\n    if(values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username))\n        errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n    if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email))\n        errors.email = \"Invalid email address !\";\n    if(values.password && !/\\d/.test(values.password))\n        errors.password = \"Password must contain a number !\"\n    else if(values.password && !/[A-Z]/.test(values.password))\n        errors.password = \"Password must contain an uppercase letter !\"\n    else if(values.password && !/[a-z]/.test(values.password))\n        errors.password = \"Password must contain a lowercase letter !\"\n    else if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n        errors.password = \"Password must contain a special character !\"\n    else if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n        errors.password = \"Password must contain 8-20 characters !\"\n    if(values.confirmPassword && values.password !== values.confirmPassword)\n        errors.confirmPassword = \"Passwords does not match !\"\n    return errors;\n}\n\nconst mapStateToProps = (state) => (\n{\n    \"form\" : state.form,\n    \"status\" : state.register.registerStatus,\n    \"err\": state.register.error\n});\nconst mapDispatchToProps = {\n    \"registerAction\": InscriptionAction\n};\nconst mergeProps = (stateProps, dispatchProps, otherProps)=> ({\n    ...stateProps,\n    ...dispatchProps,\n    ...otherProps,\n    \"handleSubmit\" : otherProps.handleSubmit((form)=>{\n        dispatchProps.registerAction(form);\n    })\n});\n\nconst connectedRegisterContainer = connect(mapStateToProps, mapDispatchToProps,mergeProps)(Register);\nconst RegisterContainer = reduxForm({\n    form : \"register\",\n    \"destroyOnUnmount\": true,  \n    validate,\n})(connectedRegisterContainer);\n\nexport default RegisterContainer;"]},"metadata":{},"sourceType":"module"}