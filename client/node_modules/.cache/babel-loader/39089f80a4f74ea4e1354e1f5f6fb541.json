{"ast":null,"code":"import _defineProperty from \"/Users/isifeddi/Desktop/Matcha/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { decodeTokenAction } from '../actions/decodeAction';\n\nconst decodeToken = () => {};\n\nconst mapStateToProps = state => ({\n  \"status\": state.status\n});\n\nconst mapDispatchToProps = {\n  \"decodeTokenAction\": decodeTokenAction\n};\n\nconst mergeProps = (stateProps, dispatchProps, otherProps) => _objectSpread({}, stateProps, {}, dispatchProps, {}, otherProps, {\n  \"handleSubmit\": otherProps.handleSubmit(form => {\n    dispatchProps.loginAction(form);\n  })\n});\n\nconst connectedLoginContainer = connect(mapStateToProps, mapDispatchToProps, mergeProps)(Login);","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/helpers/decodeToken.js"],"names":["decodeTokenAction","decodeToken","mapStateToProps","state","status","mapDispatchToProps","mergeProps","stateProps","dispatchProps","otherProps","handleSubmit","form","loginAction","connectedLoginContainer","connect","Login"],"mappings":";;;;;;AAAA,SAAQA,iBAAR,QAAgC,yBAAhC;;AAEA,MAAMC,WAAW,GAAI,MAAM,CAE1B,CAFD;;AAGA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAC5B,YAAWA,KAAK,CAACC;AADW,CAAZ,CAAxB;;AAGA,MAAMC,kBAAkB,GAAG;AACvB,uBAAqBL;AADE,CAA3B;;AAGI,MAAMM,UAAU,GAAG,CAACC,UAAD,EAAaC,aAAb,EAA4BC,UAA5B,uBACZF,UADY,MAEZC,aAFY,MAGZC,UAHY;AAIf,kBAAiBA,UAAU,CAACC,YAAX,CAAyBC,IAAD,IAAU;AAC/CH,IAAAA,aAAa,CAACI,WAAd,CAA0BD,IAA1B;AACH,GAFgB;AAJF,EAAnB;;AASJ,MAAME,uBAAuB,GAAGC,OAAO,CAACZ,eAAD,EAAkBG,kBAAlB,EAAqCC,UAArC,CAAP,CAAwDS,KAAxD,CAAhC","sourcesContent":["import {decodeTokenAction} from '../actions/decodeAction';\n\nconst decodeToken  = () => {\n    \n}\nconst mapStateToProps = (state) => ({\n        \"status\" : state.status\n});\nconst mapDispatchToProps = {\n    \"decodeTokenAction\": decodeTokenAction  \n};\n    const mergeProps = (stateProps, dispatchProps, otherProps) => ({\n        ...stateProps,\n        ...dispatchProps,\n        ...otherProps,\n        \"handleSubmit\" : otherProps.handleSubmit((form) => {\n            dispatchProps.loginAction(form);\n        })\n    });\n    \nconst connectedLoginContainer = connect(mapStateToProps, mapDispatchToProps,mergeProps)(Login);\n"]},"metadata":{},"sourceType":"module"}