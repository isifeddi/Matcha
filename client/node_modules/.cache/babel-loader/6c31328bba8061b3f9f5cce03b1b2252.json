{"ast":null,"code":"import axios from 'axios';\n\nconst validate = values => {\n  const errors = {};\n  const requiredFields = ['firstname', 'lastname', 'username', 'email', 'password', 'confirmPassword'];\n\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n  const asyncValidate = values => {\n    return sleep(1000).then(async () => {\n      const error = {};\n      const v = {\n        username: values.username,\n        email: values.email\n      };\n      const er = await axios.post('http://localhost:5000/checkIfEx', v);\n\n      if (er.data.username === 'Username already exists') {\n        error.username = er.data.username;\n      }\n\n      if (er.data.email === 'Email already exists') {\n        error.email = er.data.email;\n      }\n\n      if (error.username !== 'undefined' && error.email !== 'undefined') throw error;\n    });\n  };\n\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  if (values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username)) errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) errors.email = \"Invalid email address !\";\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  return errors;\n};\n\nexport default validate;","map":{"version":3,"sources":["/Users/ibouroum/Desktop/Maatcha/client/src/containers/Register/validate.js"],"names":["axios","validate","values","errors","requiredFields","sleep","ms","Promise","resolve","setTimeout","asyncValidate","then","error","v","username","email","er","post","data","forEach","field","trim","test","password","confirmPassword"],"mappings":"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","sourcesContent":["import axios from 'axios'\nconst validate = (values) => {\n    const errors = {};\n    const requiredFields = [\n        'firstname',\n        'lastname',\n        'username',\n        'email',\n        'password',\n        'confirmPassword',\n    ];\n\n    const sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst asyncValidate = (values) => {\n  \n    return sleep(1000)\n    .then(async () => {\n\n      const error = {}\n\n      const v = {username :values.username, email: values.email}\n\n      const er = await axios.post('http://localhost:5000/checkIfEx', v)\n\n      if (er.data.username === 'Username already exists')\n      {\n        error.username = er.data.username\n      }\n      if (er.data.email === 'Email already exists')\n      {\n        error.email= er.data.email\n      }\n      if(error.username !== 'undefined' && error.email !== 'undefined')\n        throw error\n    })\n}\n\n    requiredFields.forEach(field => {\n        if (!values[field] || !values[field].trim()) {\n            errors[field] = 'Required !';\n        }\n    });\n\n    if(values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username))\n        errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n    if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email))\n        errors.email = \"Invalid email address !\";\n    if(values.password && !/\\d/.test(values.password))\n        errors.password = \"Password must contain a number !\"\n    else if(values.password && !/[A-Z]/.test(values.password))\n        errors.password = \"Password must contain an uppercase letter !\"\n    else if(values.password && !/[a-z]/.test(values.password))\n        errors.password = \"Password must contain a lowercase letter !\"\n    else if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n        errors.password = \"Password must contain a special character !\"\n    else if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n        errors.password = \"Password must contain 8-20 characters !\"\n    if(values.confirmPassword && values.password !== values.confirmPassword)\n        errors.confirmPassword = \"Passwords does not match !\"\n    return errors;\n}\n\nexport default validate;\n\n\n\n"]},"metadata":{},"sourceType":"module"}