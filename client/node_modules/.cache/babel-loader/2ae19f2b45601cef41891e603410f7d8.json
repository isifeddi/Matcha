{"ast":null,"code":"import _defineProperty from \"/Users/ibouroum/Desktop/Maatcha/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Register from '../../components/Register';\nimport { InscriptionAction } from '../../actions/registerAction';\nimport { connect } from \"react-redux\";\nimport { reduxForm } from 'redux-form';\nimport axios from 'axios';\n\nconst usernameValidate = (values, dispatch, props) => axios.post(\"http://localhost:5000/availableUsername\", values.username).then(res => {\n  if (res.data.available === false) {\n    if (props.asyncErrors) {\n      throw {\n        \"username\": \"That username is taken\",\n        \"email\": \"That email is taken\"\n      };\n    } else {\n      throw {\n        \"username\": \"That username is taken\"\n      };\n    }\n  } else if (props.asyncErrors) {\n    throw {\n      \"email\": \"That email is taken\"\n    };\n  }\n}).catch(error => {\n  throw {\n    \"username\": \"That username is taken\"\n  };\n});\n\nconst emailValidate = (values, dispatch, props) => axios.post(\"http://localhost:5000/availableEmail\", values.email).then(res => {\n  if (res.data.available === false) {\n    if (props.asyncErrors) {\n      throw {\n        \"username\": \"That username is taken\",\n        \"email\": \"That email is taken\"\n      };\n    } else {\n      throw {\n        \"email\": \"That email is taken\"\n      };\n    }\n  } else if (props.asyncErrors) {\n    throw {\n      \"username\": \"That username is taken\"\n    };\n  }\n});\n\nfunction composeAsyncValidators(validatorFns) {\n  return async (values, dispatch, props, field) => {\n    if (!field) {\n      return await function () {\n        return true;\n      };\n    }\n\n    const validatorFn = validatorFns[field];\n    await validatorFn(values, dispatch, props, field);\n  };\n}\n\nconst asyncValidateAll = composeAsyncValidators({\n  \"username\": usernameValidate,\n  \"email\": emailValidate\n});\n\nconst validate = values => {\n  const errors = {};\n  const requiredFields = ['firstname', 'lastname', 'username', 'email', 'password', 'confirmPassword'];\n  requiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n      errors[field] = 'Required !';\n    }\n  });\n  if (values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username)) errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) errors.email = \"Invalid email address !\";\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  return errors;\n};\n\nconst mapStateToProps = state => ({\n  \"form\": state.form,\n  \"status\": state.register\n});\n\nconst mapDispatchToProps = {\n  \"registerAction\": InscriptionAction\n};\n\nconst mergeProps = (stateProps, dispatchProps, otherProps) => _objectSpread({}, stateProps, {}, dispatchProps, {}, otherProps, {\n  \"handleSubmit\": otherProps.handleSubmit(form => {\n    dispatchProps.registerAction(form);\n  })\n});\n\nconst connectedRegisterContainer = connect(mapStateToProps, mapDispatchToProps, mergeProps)(Register);\nconst RegisterContainer = reduxForm({\n  form: \"register\",\n  \"destroyOnUnmount\": false,\n  validate,\n  \"asyncValidate\": asyncValidateAll,\n  \"asyncBlurFields\": [\"username\", \"email\"]\n})(connectedRegisterContainer);\nexport default RegisterContainer;","map":{"version":3,"sources":["/Users/ibouroum/Desktop/Maatcha/client/src/containers/Register/index.js"],"names":["React","Register","InscriptionAction","connect","reduxForm","axios","usernameValidate","values","dispatch","props","post","username","then","res","data","available","asyncErrors","catch","error","emailValidate","email","composeAsyncValidators","validatorFns","field","validatorFn","asyncValidateAll","validate","errors","requiredFields","forEach","trim","test","password","confirmPassword","mapStateToProps","state","form","register","mapDispatchToProps","mergeProps","stateProps","dispatchProps","otherProps","handleSubmit","registerAction","connectedRegisterContainer","RegisterContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Register from '../../components/Register';\nimport {InscriptionAction} from '../../actions/registerAction';\nimport {connect} from \"react-redux\";\nimport {reduxForm } from 'redux-form';\nimport axios from 'axios';\n\nconst usernameValidate = (values, dispatch, props) => axios.post(\"http://localhost:5000/availableUsername\",values.username)\n.then((res) => {\n  if (res.data.available === false) {\n    if (props.asyncErrors) {\n      throw {\"username\": \"That username is taken\", \"email\": \"That email is taken\"};\n    } else {\n      throw {\"username\": \"That username is taken\"};\n    }\n  } else if (props.asyncErrors) {\n    throw {\"email\": \"That email is taken\"};\n  }\n}).catch((error) => {\n    throw {\"username\": \"That username is taken\"};\n});\nconst emailValidate = (values, dispatch, props) => axios.post(\"http://localhost:5000/availableEmail\",values.email)\n.then((res) => {\n  if (res.data.available === false) {\n    if (props.asyncErrors) {\n      throw {\"username\": \"That username is taken\", \"email\": \"That email is taken\"};\n    } else {\n      throw {\"email\": \"That email is taken\"};}\n    } else if (props.asyncErrors) {\n      throw {\"username\": \"That username is taken\"};\n    }\n});\n\nfunction composeAsyncValidators (validatorFns) {\n  return async (values, dispatch, props, field) => {\n    if (!field) {\n      return await function () {\n        return true;\n      };\n    }\n    const validatorFn = validatorFns[field];\n    await validatorFn(values, dispatch, props, field);\n  };\n}\n\nconst asyncValidateAll = composeAsyncValidators({\n  \"username\": usernameValidate,\n  \"email\": emailValidate\n});\n\nconst validate = (values) => {\nconst errors = {};\nconst requiredFields = [\n    'firstname',\n    'lastname',\n    'username',\n    'email',\n    'password',\n    'confirmPassword',\n];\n\nrequiredFields.forEach(field => {\n    if (!values[field] || !values[field].trim()) {\n        errors[field] = 'Required !';\n    }\n});\n\nif(values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username))\n    errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\nif (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email))\n    errors.email = \"Invalid email address !\";\nif(values.password && !/\\d/.test(values.password))\n    errors.password = \"Password must contain a number !\"\nelse if(values.password && !/[A-Z]/.test(values.password))\n    errors.password = \"Password must contain an uppercase letter !\"\nelse if(values.password && !/[a-z]/.test(values.password))\n    errors.password = \"Password must contain a lowercase letter !\"\nelse if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n    errors.password = \"Password must contain a special character !\"\nelse if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n    errors.password = \"Password must contain 8-20 characters !\"\nif(values.confirmPassword && values.password !== values.confirmPassword)\n    errors.confirmPassword = \"Passwords does not match !\"\nreturn errors;\n}\n\nconst mapStateToProps = (state) => (\n{\n    \"form\" : state.form,\n    \"status\" : state.register\n});\n\nconst mapDispatchToProps = {\n    \"registerAction\": InscriptionAction\n};\nconst mergeProps = (stateProps, dispatchProps, otherProps)=> ({\n    ...stateProps,\n    ...dispatchProps,\n    ...otherProps,\n    \"handleSubmit\" : otherProps.handleSubmit((form)=>{\n        dispatchProps.registerAction(form);\n    })\n});\nconst connectedRegisterContainer = connect(mapStateToProps, mapDispatchToProps,mergeProps)(Register);\nconst RegisterContainer = reduxForm({\n    form : \"register\",\n    \"destroyOnUnmount\": false,  \n  validate,\n  \"asyncValidate\": asyncValidateAll,\n  \"asyncBlurFields\": [\"username\", \"email\"]\n\n})(connectedRegisterContainer);\n\nexport default RegisterContainer;\n"]},"metadata":{},"sourceType":"module"}