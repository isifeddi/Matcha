{"ast":null,"code":"import axios from 'axios';\n\nconst validate = async values => {\n  const errors = {\n    username: \"\",\n    email: \"\"\n  }; // const requiredFields = [\n  //     'firstname',\n  //     'lastname',\n  //     'username',\n  //     'email',\n  //     'password',\n  //     'confirmPassword',\n  // ];\n  // requiredFields.forEach(field => {\n  //     if (!values[field] || !values[field].trim()) {\n  //         errors[field] = 'Required !';\n  //     }\n  // });\n\n  let u = 0;\n  let e = 0;\n  const response = await axios.post('http://localhost:5000/register', values);\n  console.log(response.data);\n  if (response.data.username === 'username already exists') errors.username = 'username already exists';\n  if (response.data.email === 'email already exists') errors.email = 'email already exists';\n  console.log(errors.username + \"oke\"); // function getv () {\n  //     return  axios.post('http://localhost:5000/register', values)\n  //             .then(function (response){\n  //                 // if(response.data.username === 'username already exists')\n  //                 //     u = 1;\n  //                 // else\n  //                 //     u = 0;\n  //                 // if(response.data.email === 'email already exists')\n  //                 //     e = 1;\n  //                 // else\n  //                 //     e = 0;\n  //                 // return [u, e];\n  //                 return [response.data.username, response.data.email];\n  //             });\n  // }\n  // getv().then(function (r) {\n  //     console.log(r);\n  //     if(r[0] === 'username already exists')\n  //         u = 1;\n  //     else\n  //         u = 0;\n  //     if(r[1] === 'email already exists')\n  //         e = 1;\n  //     else\n  //         e = 0;\n  // })\n  // console.log(e)\n\n  if (values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username)) errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"'; // if(values.username && u === 1)\n  //     errors.username = \"username already exists\"\n\n  if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) errors.email = \"Invalid email address !\"; // if(values.email && e === 1)\n  //     errors.email = \"email already exists\"\n\n  if (values.password && !/\\d/.test(values.password)) errors.password = \"Password must contain a number !\";else if (values.password && !/[A-Z]/.test(values.password)) errors.password = \"Password must contain an uppercase letter !\";else if (values.password && !/[a-z]/.test(values.password)) errors.password = \"Password must contain a lowercase letter !\";else if (values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password)) errors.password = \"Password must contain a special character !\";else if (values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password)) errors.password = \"Password must contain 8-20 characters !\";\n  if (values.confirmPassword && values.password !== values.confirmPassword) errors.confirmPassword = \"Passwords does not match !\";\n  return errors;\n};\n\nexport default validate;","map":{"version":3,"sources":["/Users/isifeddi/Desktop/Matcha/client/src/containers/Register/validate.js"],"names":["axios","validate","values","errors","username","email","u","e","response","post","console","log","data","test","password","confirmPassword"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAG,MAAOC,MAAP,IAAkB;AAC/B,QAAMC,MAAM,GAAG;AACXC,IAAAA,QAAQ,EAAE,EADC;AAEXC,IAAAA,KAAK,EAAE;AAFI,GAAf,CAD+B,CAM/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AAEA,QAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAN,CAAW,gCAAX,EAA6CP,MAA7C,CAAvB;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;AACA,MAAGJ,QAAQ,CAACI,IAAT,CAAcR,QAAd,KAA2B,yBAA9B,EACYD,MAAM,CAACC,QAAP,GAAkB,yBAAlB;AACJ,MAAGI,QAAQ,CAACI,IAAT,CAAcP,KAAd,KAAwB,sBAA3B,EACIF,MAAM,CAACE,KAAP,GAAe,sBAAf;AACZK,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACC,QAAP,GAAkB,KAA9B,EA9B+B,CA+B/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAGF,MAAM,CAACE,QAAP,IAAmB,CAAC,qBAAqBS,IAArB,CAA0BX,MAAM,CAACE,QAAjC,CAAvB,EACID,MAAM,CAACC,QAAP,GAAkB,2EAAlB,CA9D2B,CA+D/B;AACA;;AACA,MAAIF,MAAM,CAACG,KAAP,IAAgB,CAAC,4CAA4CQ,IAA5C,CAAiDX,MAAM,CAACG,KAAxD,CAArB,EACIF,MAAM,CAACE,KAAP,GAAe,yBAAf,CAlE2B,CAmE/B;AACA;;AACA,MAAGH,MAAM,CAACY,QAAP,IAAmB,CAAC,KAAKD,IAAL,CAAUX,MAAM,CAACY,QAAjB,CAAvB,EACIX,MAAM,CAACW,QAAP,GAAkB,kCAAlB,CADJ,KAEK,IAAGZ,MAAM,CAACY,QAAP,IAAmB,CAAC,QAAQD,IAAR,CAAaX,MAAM,CAACY,QAApB,CAAvB,EACDX,MAAM,CAACW,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGZ,MAAM,CAACY,QAAP,IAAmB,CAAC,QAAQD,IAAR,CAAaX,MAAM,CAACY,QAApB,CAAvB,EACDX,MAAM,CAACW,QAAP,GAAkB,4CAAlB,CADC,KAEA,IAAGZ,MAAM,CAACY,QAAP,IAAmB,CAAC,uCAAuCD,IAAvC,CAA4CX,MAAM,CAACY,QAAnD,CAAvB,EACDX,MAAM,CAACW,QAAP,GAAkB,6CAAlB,CADC,KAEA,IAAGZ,MAAM,CAACY,QAAP,IAAmB,CAAC,uDAAuDD,IAAvD,CAA4DX,MAAM,CAACY,QAAnE,CAAvB,EACDX,MAAM,CAACW,QAAP,GAAkB,yCAAlB;AACJ,MAAGZ,MAAM,CAACa,eAAP,IAA0Bb,MAAM,CAACY,QAAP,KAAoBZ,MAAM,CAACa,eAAxD,EACIZ,MAAM,CAACY,eAAP,GAAyB,4BAAzB;AAEJ,SAAOZ,MAAP;AACH,CAnFD;;AAqFA,eAAeF,QAAf","sourcesContent":["import axios from 'axios';\n\nconst validate = async (values) => {\n    const errors = {\n        username: \"\",\n        email: \"\"\n    };\n\n    // const requiredFields = [\n    //     'firstname',\n    //     'lastname',\n    //     'username',\n    //     'email',\n    //     'password',\n    //     'confirmPassword',\n    // ];\n\n    // requiredFields.forEach(field => {\n    //     if (!values[field] || !values[field].trim()) {\n    //         errors[field] = 'Required !';\n    //     }\n    // });\n\n    let u = 0;\n    let e = 0;\n\n    const response = await axios.post('http://localhost:5000/register', values);\n    console.log(response.data)\n    if(response.data.username === 'username already exists')\n                errors.username = 'username already exists'\n            if(response.data.email === 'email already exists')\n                errors.email = 'email already exists'\n    console.log(errors.username + \"oke\")\n    // function getv () {\n    //     return  axios.post('http://localhost:5000/register', values)\n    //             .then(function (response){\n    //                 // if(response.data.username === 'username already exists')\n    //                 //     u = 1;\n    //                 // else\n    //                 //     u = 0;\n    //                 // if(response.data.email === 'email already exists')\n    //                 //     e = 1;\n    //                 // else\n    //                 //     e = 0;\n    //                 // return [u, e];\n    //                 return [response.data.username, response.data.email];\n    //             });\n    // }\n\n    // getv().then(function (r) {\n    //     console.log(r);\n    //     if(r[0] === 'username already exists')\n    //         u = 1;\n    //     else\n    //         u = 0;\n    //     if(r[1] === 'email already exists')\n    //         e = 1;\n    //     else\n    //         e = 0;\n    // })\n\n    // console.log(e)\n\n    if(values.username && !/^[a-z0-9_-]{2,20}$/.test(values.username))\n        errors.username = 'Username can contain 2-20 characters, letters (a-z), numbers, \"_\" and \"-\"';\n    // if(values.username && u === 1)\n    //     errors.username = \"username already exists\"\n    if (values.email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email))\n        errors.email = \"Invalid email address !\";\n    // if(values.email && e === 1)\n    //     errors.email = \"email already exists\"\n    if(values.password && !/\\d/.test(values.password))\n        errors.password = \"Password must contain a number !\"\n    else if(values.password && !/[A-Z]/.test(values.password))\n        errors.password = \"Password must contain an uppercase letter !\"\n    else if(values.password && !/[a-z]/.test(values.password))\n        errors.password = \"Password must contain a lowercase letter !\"\n    else if(values.password && !/[ !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(values.password))\n        errors.password = \"Password must contain a special character !\"\n    else if(values.password && !/[a-zA-Z0-9 !@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]{8,20}/.test(values.password))\n        errors.password = \"Password must contain 8-20 characters !\"\n    if(values.confirmPassword && values.password !== values.confirmPassword)\n        errors.confirmPassword = \"Passwords does not match !\"\n  \n    return errors;\n}\n\nexport default validate;"]},"metadata":{},"sourceType":"module"}